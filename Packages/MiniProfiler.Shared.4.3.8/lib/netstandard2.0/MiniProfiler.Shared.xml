<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MiniProfiler.Shared</name>
    </assembly>
    <members>
        <member name="T:StackExchange.Profiling.ClientTiming">
            <summary>
            A client timing probe
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.ClientTiming.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.ClientTiming.Start">
            <summary>
            Gets or sets the start.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.ClientTiming.Duration">
            <summary>
            Gets or sets the duration.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.ClientTiming.Id">
            <summary>
            Unique Identifier used for sql storage.
            </summary>
            <remarks>Not set unless storing in Sql</remarks>
        </member>
        <member name="P:StackExchange.Profiling.ClientTiming.MiniProfilerId">
            <summary>
            Used for sql storage
            </summary>
            <remarks>Not set unless storing in Sql</remarks>
        </member>
        <member name="T:StackExchange.Profiling.ClientTimingHelper">
            <summary>
            Helper methods to render timing scripts into the page, old functionality that may be inaccurate today.
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.ClientTimingHelper.InitScript">
            <summary>
            This code needs to be inserted in the page before client timings work.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.ClientTimingHelper.TimeScript(System.String,System.String)">
            <summary>
            You can wrap an HTML block with timing wrappers using this helper.
            </summary>
            <param name="name">The name of the block to time.</param>
            <param name="html">The HTML to wrap in this timing.</param>
        </member>
        <member name="T:StackExchange.Profiling.ClientTimings">
            <summary>
            Times collected from the client.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.ClientTimings.Timings">
            <summary>
            Gets or sets the list of client side timings.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.ClientTimings.RedirectCount">
            <summary>
            Gets or sets the redirect count.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.ClientTimings.FromRequest(StackExchange.Profiling.Internal.ResultRequest)">
            <summary>
            Gets a ClientTimings object from a <see cref="T:StackExchange.Profiling.Internal.ResultRequest"/>.
            </summary>
            <param name="request">The request to convert.</param>
            <returns>A <see cref="T:StackExchange.Profiling.ClientTimings"/> object.</returns>
        </member>
        <member name="T:StackExchange.Profiling.ColorScheme">
            <summary>
            The color scheme to use when rendering MiniProfiler.
            This is used both in the render popup and on the standalone pages.
            Ultimately, used to set classes for CSS variables.
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.ColorScheme.Light">
            <summary>
            "Light" mode (the default), white background, etc.
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.ColorScheme.Dark">
            <summary>
            "Dark" mode, near-black background, etc.
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.ColorScheme.Auto">
            <summary>
            <para>"Auto" mode, respecting what the user prefers via <c>prefers-color-scheme</c> in CSS.</para>
            <para>This is opt-in because it'd be really odd for only MiniProfiler to respect it as part of a larger page.</para>
            </summary>
        </member>
        <member name="T:StackExchange.Profiling.CustomTiming">
            <summary>
            A custom timing that usually represents a Remote Procedure Call, allowing better
            visibility into these longer-running calls.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.CustomTiming.#ctor">
            <summary>
            Don't use this.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.CustomTiming.#ctor(StackExchange.Profiling.MiniProfiler,System.String,System.Nullable{System.Decimal},System.Boolean)">
            <summary>
            Returns a new CustomTiming, also initializing its <see cref="P:StackExchange.Profiling.CustomTiming.Id"/> and, optionally, its <see cref="P:StackExchange.Profiling.CustomTiming.StackTraceSnippet"/>.
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to attach the timing so.</param>
            <param name="commandString">The descriptive command string for this timing, e.g. a URL or database command.</param>
            <param name="minSaveMs">(Optional) The minimum time required to actually save this timing (e.g. do we care?).</param>
            <param name="includeStackTrace">Whether to include the stack trace in this custom timing.</param>
        </member>
        <member name="P:StackExchange.Profiling.CustomTiming.Id">
            <summary>
            Unique identifier for this <see cref="T:StackExchange.Profiling.CustomTiming"/>.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.CustomTiming.CommandString">
            <summary>
            Gets or sets the command that was executed, e.g. "select * from Table" or "INCR my:redis:key"
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.CustomTiming.ExecuteType">
            <summary>
            Short name describing what kind of custom timing this is, e.g. "Get", "Query", "Fetch".
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.CustomTiming.StackTraceSnippet">
            <summary>
            Gets or sets roughly where in the calling code that this custom timing was executed.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.CustomTiming.StartMilliseconds">
            <summary>
            Gets or sets the offset from main <c>MiniProfiler</c> start that this custom command began.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.CustomTiming.DurationMilliseconds">
            <summary>
            Gets or sets how long this custom command statement took to execute.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.CustomTiming.FirstFetchDurationMilliseconds">
            <summary>
            OPTIONAL - how long this timing took to come back initially from the remote server,
            before all data is fetched and command is completed.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.CustomTiming.Errored">
            <summary>
            Whether this operation errored.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.CustomTiming.FirstFetchCompleted">
            <summary>
            OPTIONAL - call after receiving the first response from your Remote Procedure Call to
            properly set <see cref="P:StackExchange.Profiling.CustomTiming.FirstFetchDurationMilliseconds"/>.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.CustomTiming.Stop">
            <summary>
            Stops this timing, setting <see cref="P:StackExchange.Profiling.CustomTiming.DurationMilliseconds"/>.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.CustomTiming.ToString">
            <summary>
            Returns <see cref="P:StackExchange.Profiling.CustomTiming.CommandString"/> for debugging.
            </summary>
        </member>
        <member name="T:StackExchange.Profiling.Data.SqlExecuteType">
            <summary>
            Categories of SQL statements.
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.Data.SqlExecuteType.None">
            <summary>
            Unknown type.
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.Data.SqlExecuteType.NonQuery">
            <summary>
            DML statements that alter database state, e.g. INSERT, UPDATE.
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.Data.SqlExecuteType.Scalar">
            <summary>
            Statements that return a single record.
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.Data.SqlExecuteType.Reader">
            <summary>
            Statements that iterate over a result set.
            </summary>
        </member>
        <member name="T:StackExchange.Profiling.Data.IDbProfiler">
            <summary>
            A call back for <c>ProfiledDbConnection</c> and family.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Data.IDbProfiler.IsActive">
            <summary>
            Gets a value indicating whether or not the profiler instance is active.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Data.IDbProfiler.ExecuteStart(System.Data.IDbCommand,StackExchange.Profiling.Data.SqlExecuteType)">
            <summary>
            Called when a command starts executing.
            </summary>
            <param name="profiledDbCommand">The profiled dB Command.</param>
            <param name="executeType">The execute Type.</param>
        </member>
        <member name="M:StackExchange.Profiling.Data.IDbProfiler.ExecuteFinish(System.Data.IDbCommand,StackExchange.Profiling.Data.SqlExecuteType,System.Data.Common.DbDataReader)">
            <summary>
            Called when a reader finishes executing.
            </summary>
            <param name="profiledDbCommand">The profiled DB Command.</param>
            <param name="executeType">The execute Type.</param>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:StackExchange.Profiling.Data.IDbProfiler.ReaderFinish(System.Data.IDataReader)">
            <summary>
            Called when a reader is done iterating through the data.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:StackExchange.Profiling.Data.IDbProfiler.OnError(System.Data.IDbCommand,StackExchange.Profiling.Data.SqlExecuteType,System.Exception)">
            <summary>
            Called when an error happens during execution of a command.
            </summary>
            <param name="profiledDbCommand">The profiled DB Command.</param>
            <param name="executeType">The execute Type.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:StackExchange.Profiling.Data.Link`2">
            <summary>
            This is a micro-cache; suitable when the number of terms is controllable (a few hundred, for example),
            and strictly append-only; you cannot change existing values. All key matches are on **REFERENCE**
            equality. The type is fully thread-safe.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:StackExchange.Profiling.Data.Link`2.#ctor(`0,`1,StackExchange.Profiling.Data.Link{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.Profiling.Data.Link`2"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="tail">The tail linkage.</param>
        </member>
        <member name="P:StackExchange.Profiling.Data.Link`2.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Data.Link`2.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Data.Link`2.Tail">
            <summary>
            Gets the tail.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Data.Link`2.TryGet(StackExchange.Profiling.Data.Link{`0,`1},`0,`1@)">
            <summary>
            try and return a value from the cache based on the key.
            the default value is returned if no match is found.
            An exception is not thrown.
            </summary>
            <param name="link">The link to search.</param>
            <param name="key">The key to look for.</param>
            <param name="value">The value, if found.</param>
            <returns>true if a value is located.</returns>
        </member>
        <member name="M:StackExchange.Profiling.Data.Link`2.TryAdd(StackExchange.Profiling.Data.Link{`0,`1}@,`0,`1@)">
            <summary>
            try and return a value from the cache based on the key.
            the default value is returned if no match is found.
            An exception is not thrown.
            </summary>
            <param name="head">The head.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if a value is located, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:StackExchange.Profiling.Data.ProfiledDbCommand">
            <summary>
            The profiled database command.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbCommand.AlwaysWrapReaders">
            <summary>
            Whether to always wrap data readers, even if there isn't an active profiler on this connect.
            This allows depending on overrides for things inheriting from <see cref="T:StackExchange.Profiling.Data.ProfiledDbDataReader"/> to actually execute.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbCommand.BindByName">
            <summary>
            Gets or sets a value indicating whether or not to bind by name.
            If the underlying command supports BindByName, this sets/clears the underlying
            implementation accordingly. This is required to support OracleCommand from Dapper.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbCommand.#ctor(System.Data.Common.DbCommand,System.Data.Common.DbConnection,StackExchange.Profiling.Data.IDbProfiler)">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.Profiling.Data.ProfiledDbCommand"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="connection">The connection.</param>
            <param name="profiler">The profiler.</param>
            <exception cref="T:System.ArgumentNullException">Throws when <paramref name="command"/> is <c>null</c>.</exception>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbCommand.GetBindByName(System.Type)">
            <summary>
            Get the binding name.
            </summary>
            <param name="commandType">The command type.</param>
            <returns>The <see cref="T:System.Action"/>.</returns>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbCommand.CommandText">
            <inheritdoc cref="P:System.Data.Common.DbCommand.CommandText"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbCommand.CommandTimeout">
            <inheritdoc cref="P:System.Data.Common.DbCommand.CommandTimeout"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbCommand.CommandType">
            <inheritdoc cref="P:System.Data.Common.DbCommand.CommandType"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbCommand.DbConnection">
            <inheritdoc cref="P:System.Data.Common.DbCommand.DbConnection"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbCommand.DbParameterCollection">
            <inheritdoc cref="P:System.Data.Common.DbCommand.DbParameterCollection"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbCommand.DbTransaction">
            <inheritdoc cref="P:System.Data.Common.DbCommand.DbTransaction"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbCommand.DesignTimeVisible">
            <inheritdoc cref="P:System.Data.Common.DbCommand.DesignTimeVisible"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbCommand.UpdatedRowSource">
            <inheritdoc cref="P:System.Data.Common.DbCommand.UpdatedRowSource"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbCommand.CreateDbDataReader(System.Data.Common.DbDataReader,System.Data.CommandBehavior,StackExchange.Profiling.Data.IDbProfiler)">
            <summary>
            Creates a wrapper data reader for <see cref="M:StackExchange.Profiling.Data.ProfiledDbCommand.ExecuteDbDataReader(System.Data.CommandBehavior)"/> and <see cref="M:StackExchange.Profiling.Data.ProfiledDbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)"/> />
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
            <inheritdoc cref="M:System.Data.Common.DbCommand.ExecuteDbDataReader(System.Data.CommandBehavior)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbCommand.ExecuteNonQuery">
            <inheritdoc cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbCommand.ExecuteScalar">
            <inheritdoc cref="M:System.Data.Common.DbCommand.ExecuteScalar"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbCommand.Cancel">
            <inheritdoc cref="M:System.Data.Common.DbCommand.Cancel"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbCommand.Prepare">
            <inheritdoc cref="M:System.Data.Common.DbCommand.Prepare"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbCommand.CreateDbParameter">
            <inheritdoc cref="M:System.Data.Common.DbCommand.CreateDbParameter"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbCommand.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this command.
            </summary>
            <param name="disposing">false if this is being disposed in a <c>finalizer</c>.</param>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbCommand.InternalCommand">
            <summary>
            Obsolete - please use <see cref="P:StackExchange.Profiling.Data.ProfiledDbCommand.WrappedCommand"/>.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbCommand.WrappedCommand">
            <summary>
            Gets the internally wrapped <see cref="T:System.Data.Common.DbCommand"/>.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbCommand.System#ICloneable#Clone">
            <summary>
            Clone the command, Entity Framework expects this behavior.
            </summary>
            <returns>The <see cref="T:StackExchange.Profiling.Data.ProfiledDbCommand"/>.</returns>
        </member>
        <member name="T:StackExchange.Profiling.Data.ProfiledDbConnection">
            <summary>
            Wraps a database connection, allowing SQL execution timings to be collected when a <see cref="T:StackExchange.Profiling.MiniProfiler"/> session is started.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbConnection.Profiler">
            <summary>
            Gets the current profiler instance; could be null.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbConnection.#ctor(System.Data.Common.DbConnection,StackExchange.Profiling.Data.IDbProfiler)">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.Profiling.Data.ProfiledDbConnection"/> class.
            Returns a new <see cref="T:StackExchange.Profiling.Data.ProfiledDbConnection"/> that wraps <paramref name="connection"/>,
            providing query execution profiling. If profiler is null, no profiling will occur.
            </summary>
            <param name="connection"><c>Your provider-specific flavour of connection, e.g. SqlConnection, OracleConnection</c></param>
            <param name="profiler">The currently started <see cref="T:StackExchange.Profiling.MiniProfiler"/> or null.</param>
            <exception cref="T:System.ArgumentNullException">Throws when <paramref name="connection"/> is <c>null</c>.</exception>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbConnection.WrappedConnection">
            <summary>
            Gets the connection that this ProfiledDbConnection wraps.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbConnection.ConnectionString">
            <inheritdoc cref="P:System.Data.Common.DbConnection.ConnectionString"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbConnection.ConnectionTimeout">
            <inheritdoc cref="P:System.Data.Common.DbConnection.ConnectionTimeout"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbConnection.Database">
            <inheritdoc cref="P:System.Data.Common.DbConnection.Database"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbConnection.DataSource">
            <inheritdoc cref="P:System.Data.Common.DbConnection.DataSource"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbConnection.ServerVersion">
            <inheritdoc cref="P:System.Data.Common.DbConnection.ServerVersion"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbConnection.State">
            <inheritdoc cref="P:System.Data.Common.DbConnection.State"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbConnection.ChangeDatabase(System.String)">
            <inheritdoc cref="M:System.Data.Common.DbConnection.ChangeDatabase(System.String)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbConnection.Close">
            <inheritdoc cref="M:System.Data.Common.DbConnection.Close"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbConnection.Open">
            <inheritdoc cref="M:System.Data.Common.DbConnection.Open"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbConnection.OpenAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbConnection.BeginDbTransaction(System.Data.IsolationLevel)">
            <inheritdoc cref="M:System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbConnection.CreateDbCommand(System.Data.Common.DbCommand,StackExchange.Profiling.Data.IDbProfiler)">
            <summary>
            Creates and returns a <see cref="T:System.Data.Common.DbCommand"/> object associated with the current connection.
            </summary>
            <returns>A <see cref="T:StackExchange.Profiling.Data.ProfiledDbCommand"/> wrapping the created <see cref="T:System.Data.Common.DbCommand"/>.</returns>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbConnection.CreateDbCommand">
            <inheritdoc cref="M:System.Data.Common.DbConnection.CreateDbCommand"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbConnection.Dispose(System.Boolean)">
            <summary>
            Dispose the underlying connection.
            </summary>
            <param name="disposing">false if preempted from a <c>finalizer</c></param>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbConnection.StateChangeHandler(System.Object,System.Data.StateChangeEventArgs)">
            <summary>
            The state change handler.
            </summary>
            <param name="sender">The sender.</param>
            <param name="stateChangeEventArguments">The state change event arguments.</param>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbConnection.CanRaiseEvents">
            <summary>
            Gets a value indicating whether events can be raised.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbConnection.EnlistTransaction(System.Transactions.Transaction)">
            <inheritdoc cref="M:System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbConnection.GetSchema">
            <inheritdoc cref="M:System.Data.Common.DbConnection.GetSchema"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbConnection.GetSchema(System.String)">
            <inheritdoc cref="M:System.Data.Common.DbConnection.GetSchema(System.String)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbConnection.GetSchema(System.String,System.String[])">
            <inheritdoc cref="M:System.Data.Common.DbConnection.GetSchema(System.String,System.String[])"/>
        </member>
        <member name="T:StackExchange.Profiling.Data.ProfiledDbDataAdapter">
            <summary>
            Provides a wrapper around a native <see cref="T:System.Data.Common.DbDataAdapter"/>, allowing a profiled Fill operation.
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.Data.ProfiledDbDataAdapter.TokenReader">
            <summary>
            This static variable is simply used as a non-null placeholder in the MiniProfiler.ExecuteFinish method.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbDataAdapter.InternalAdapter">
            <summary>
            Gets the underlying adapter. Useful for when APIs can't handle the wrapped adapter (e.g. CommandBuilder).
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataAdapter.#ctor(System.Data.IDbDataAdapter,StackExchange.Profiling.Data.IDbProfiler)">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.Profiling.Data.ProfiledDbDataAdapter"/> class.
            </summary>
            <param name="wrappedAdapter">The wrapped adapter.</param>
            <param name="profiler">The profiler.</param>
            <exception cref="T:System.ArgumentNullException">Throws when the <paramref name="wrappedAdapter"/> is <c>null</c>.</exception>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
            <inheritdoc cref="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataAdapter.Fill(System.Data.DataSet)">
            <inheritdoc cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataAdapter.Fill(System.Data.DataTable)">
            <inheritdoc cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataAdapter.GetFillParameters">
            <inheritdoc cref="M:System.Data.Common.DbDataAdapter.GetFillParameters"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbDataAdapter.MissingMappingAction">
            <inheritdoc cref="P:System.Data.IDataAdapter.MissingMappingAction"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbDataAdapter.MissingSchemaAction">
            <inheritdoc cref="P:System.Data.IDataAdapter.MissingSchemaAction"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbDataAdapter.TableMappings">
            <inheritdoc cref="P:System.Data.IDataAdapter.TableMappings"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbDataAdapter.SelectCommand">
            <inheritdoc cref="P:System.Data.Common.DbDataAdapter.SelectCommand"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbDataAdapter.InsertCommand">
            <inheritdoc cref="P:System.Data.Common.DbDataAdapter.InsertCommand"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbDataAdapter.UpdateCommand">
            <inheritdoc cref="P:System.Data.Common.DbDataAdapter.UpdateCommand"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbDataAdapter.DeleteCommand">
            <inheritdoc cref="P:System.Data.Common.DbDataAdapter.DeleteCommand"/>
        </member>
        <member name="T:StackExchange.Profiling.Data.ProfiledDbDataReader">
            <summary>
            The profiled database data reader.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.#ctor(System.Data.Common.DbDataReader,StackExchange.Profiling.Data.IDbProfiler)">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.Profiling.Data.ProfiledDbDataReader"/> class (with <see cref="F:System.Data.CommandBehavior.Default"/>).
            </summary>
            <param name="reader">The reader.</param>
            <param name="profiler">The profiler.</param>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.#ctor(System.Data.Common.DbDataReader,System.Data.CommandBehavior,StackExchange.Profiling.Data.IDbProfiler)">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.Profiling.Data.ProfiledDbDataReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="behavior">The behavior specified during command execution.</param>
            <param name="profiler">The profiler.</param>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbDataReader.Behavior">
            <summary>Gets the behavior specified during command execution.</summary>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbDataReader.Depth">
            <inheritdoc cref="P:System.Data.Common.DbDataReader.Depth"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbDataReader.FieldCount">
            <inheritdoc cref="P:System.Data.Common.DbDataReader.FieldCount"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbDataReader.HasRows">
            <inheritdoc cref="P:System.Data.Common.DbDataReader.HasRows"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbDataReader.IsClosed">
            <inheritdoc cref="P:System.Data.Common.DbDataReader.IsClosed"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbDataReader.RecordsAffected">
            <inheritdoc cref="P:System.Data.Common.DbDataReader.RecordsAffected"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbDataReader.WrappedReader">
            <summary>
            The <see cref="T:System.Data.Common.DbDataReader"/> that is being used.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbDataReader.Item(System.String)">
            <inheritdoc cref="P:System.Data.Common.DbDataReader.Item(System.String)"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbDataReader.Item(System.Int32)">
            <inheritdoc cref="P:System.Data.Common.DbDataReader.Item(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetBoolean(System.Int32)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetBoolean(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetByte(System.Int32)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetByte(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetChar(System.Int32)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetChar(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetData(System.Int32)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetData(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetDataTypeName(System.Int32)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetDataTypeName(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetDateTime(System.Int32)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetDateTime(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetDecimal(System.Int32)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetDecimal(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetDouble(System.Int32)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetDouble(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetEnumerator">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetEnumerator"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetFieldType(System.Int32)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetFieldValue``1(System.Int32)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetFieldValue``1(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetFloat(System.Int32)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetFloat(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetGuid(System.Int32)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetGuid(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetInt16(System.Int32)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetInt16(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetInt32(System.Int32)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetInt32(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetInt64(System.Int32)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetInt64(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetName(System.Int32)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetName(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetOrdinal(System.String)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetOrdinal(System.String)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetString(System.Int32)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetString(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetValue(System.Int32)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetValue(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetValues(System.Object[])">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetValues(System.Object[])"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.IsDBNull(System.Int32)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.NextResult">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.NextResult"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.NextResultAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.Read">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.Read"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.ReadAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.Close">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.Close"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.GetSchemaTable">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.GetSchemaTable"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbDataReader.Dispose(System.Boolean)">
            <inheritdoc cref="M:System.Data.Common.DbDataReader.Dispose(System.Boolean)"/>
        </member>
        <member name="T:StackExchange.Profiling.Data.ProfiledDbProviderFactory">
            <summary>
            Wrapper for a database provider factory to enable profiling.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbProviderFactory.WrappedDbProviderFactory">
            <summary>
            The <see cref="T:System.Data.Common.DbProviderFactory"/> that this profiled version wraps.
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.Data.ProfiledDbProviderFactory.Instance">
            <summary>
            Every provider factory must have an Instance public field.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbProviderFactory.#ctor(System.Data.Common.DbProviderFactory,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.Profiling.Data.ProfiledDbProviderFactory"/> class.
            A proxy provider factory
            </summary>
            <param name="factory">The provider factory to wrap.</param>
            <param name="alwaysWrap">Whether ti always wrap results in Profiled equivalents, even if there's no active profiler</param>
            <remarks>
            This exists for places where extremely consistent behavior is desired. Primarily assigning profiled
            elements to others, where such an assignment would be invalid without the wrapping.
            Example: when MiniProfiler.Current is null:
                alwaysWrap == false: CreateCommand returns (type), e.g. SqlCommand
                alwaysWrap == true: CreateCommand  return ProfiledDbCommand
            </remarks>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbProviderFactory.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:StackExchange.Profiling.Data.ProfiledDbProviderFactory"/> class from being created.
            Used for database provider APIs internally.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbProviderFactory.CreateCommand">
            <inheritdoc cref="M:System.Data.Common.DbProviderFactory.CreateCommand"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbProviderFactory.CreateConnection">
            <inheritdoc cref="M:System.Data.Common.DbProviderFactory.CreateConnection"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbProviderFactory.CreateConnectionStringBuilder">
            <inheritdoc cref="M:System.Data.Common.DbProviderFactory.CreateConnectionStringBuilder"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbProviderFactory.CreateParameter">
            <inheritdoc cref="M:System.Data.Common.DbProviderFactory.CreateParameter"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbProviderFactory.InitProfiledDbProviderFactory(System.Data.Common.DbProviderFactory)">
            <summary>
            Allow to re-initialize the provider factory.
            </summary>
            <param name="tail">The tail.</param>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbProviderFactory.CanCreateDataSourceEnumerator">
            <inheritdoc cref="P:System.Data.Common.DbProviderFactory.CanCreateDataSourceEnumerator"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbProviderFactory.CreateCommandBuilder">
            <inheritdoc cref="M:System.Data.Common.DbProviderFactory.CreateCommandBuilder"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbProviderFactory.CreateDataAdapter">
            <inheritdoc cref="M:System.Data.Common.DbProviderFactory.CreateDataAdapter"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbProviderFactory.CreateDataSourceEnumerator">
            <inheritdoc cref="M:System.Data.Common.DbProviderFactory.CreateDataSourceEnumerator"/>
        </member>
        <member name="T:StackExchange.Profiling.Data.ProfiledDbTransaction">
            <summary>
            The profiled database transaction.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbTransaction.#ctor(System.Data.Common.DbTransaction,StackExchange.Profiling.Data.ProfiledDbConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.Profiling.Data.ProfiledDbTransaction"/> class.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="connection">The connection.</param>
            <exception cref="T:System.ArgumentNullException">Throws when the <paramref name="transaction"/> or <paramref name="connection"/> is <c>null</c>.</exception>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbTransaction.DbConnection">
            <inheritdoc cref="P:System.Data.Common.DbTransaction.DbConnection"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbTransaction.WrappedTransaction">
            <summary>
            Gets the wrapped transaction.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Data.ProfiledDbTransaction.IsolationLevel">
            <inheritdoc cref="P:System.Data.Common.DbTransaction.IsolationLevel"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbTransaction.Commit">
            <inheritdoc cref="M:System.Data.Common.DbTransaction.Commit"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbTransaction.Rollback">
            <inheritdoc cref="M:System.Data.Common.DbTransaction.Rollback"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.ProfiledDbTransaction.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Data.Common.DbTransaction"/>.
            </summary>
            <param name="disposing">false if being called from a <c>finalizer</c></param>
        </member>
        <member name="T:StackExchange.Profiling.Data.SimpleProfiledCommand">
            <summary>
            A general implementation of <see cref="T:System.Data.IDbCommand"/> that uses an <see cref="T:StackExchange.Profiling.Data.IDbProfiler"/>
            to collect profiling information.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledCommand.#ctor(System.Data.IDbCommand,System.Data.IDbConnection,StackExchange.Profiling.Data.IDbProfiler)">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.Profiling.Data.SimpleProfiledCommand"/> class, creating a new wrapped command.
            </summary>
            <param name="command">The wrapped command.</param>
            <param name="connection">The wrapped connection the command is attached to.</param>
            <param name="profiler">The profiler to use.</param>
            <exception cref="T:System.ArgumentNullException">Throws then the <paramref name="command"/> is <c>null</c>.</exception>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledCommand.Prepare">
            <inheritdoc cref="M:System.Data.IDbCommand.Prepare"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledCommand.Cancel">
            <inheritdoc cref="M:System.Data.IDbCommand.Cancel"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledCommand.CreateParameter">
            <inheritdoc cref="M:System.Data.IDbCommand.CreateParameter"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledCommand.ExecuteNonQuery">
            <inheritdoc cref="M:System.Data.IDbCommand.ExecuteNonQuery"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledCommand.ExecuteReader">
            <inheritdoc cref="M:System.Data.IDbCommand.ExecuteReader"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledCommand.ExecuteReader(System.Data.CommandBehavior)">
            <inheritdoc cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledCommand.ExecuteScalar">
            <inheritdoc cref="M:System.Data.IDbCommand.ExecuteScalar"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledCommand.ProfileWith``1(StackExchange.Profiling.Data.SqlExecuteType,System.Func{``0})">
            <summary>
            Profile with results.
            </summary>
            <param name="type">The type of execution.</param>
            <param name="func">A function to execute against the profile result.</param>
            <typeparam name="TResult">the type of result to return.</typeparam>
        </member>
        <member name="P:StackExchange.Profiling.Data.SimpleProfiledCommand.Connection">
            <inheritdoc cref="P:System.Data.IDbCommand.Connection"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.SimpleProfiledCommand.Transaction">
            <inheritdoc cref="P:System.Data.IDbCommand.Transaction"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.SimpleProfiledCommand.CommandText">
            <inheritdoc cref="P:System.Data.IDbCommand.CommandText"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.SimpleProfiledCommand.CommandTimeout">
            <inheritdoc cref="P:System.Data.IDbCommand.CommandTimeout"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.SimpleProfiledCommand.CommandType">
            <inheritdoc cref="P:System.Data.IDbCommand.CommandType"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.SimpleProfiledCommand.Parameters">
            <inheritdoc cref="P:System.Data.IDbCommand.Parameters"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.SimpleProfiledCommand.UpdatedRowSource">
            <inheritdoc cref="P:System.Data.IDbCommand.UpdatedRowSource"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledCommand.Dispose">
            <summary>
            Dispose the command / connection and profiler.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledCommand.Dispose(System.Boolean)">
            <summary>
            Dispose the command / connection and profiler.
            </summary>
            <param name="disposing">false if the dispose is called from a <c>finalizer</c></param>
        </member>
        <member name="T:StackExchange.Profiling.Data.SimpleProfiledConnection">
            <summary>
            A general implementation of <c>IDbConnection</c> that uses an <see cref="T:StackExchange.Profiling.Data.IDbProfiler"/>
            to collect profiling information.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Data.SimpleProfiledConnection.ConnectionString">
            <inheritdoc cref="P:System.Data.IDbConnection.ConnectionString"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.SimpleProfiledConnection.ConnectionTimeout">
            <inheritdoc cref="P:System.Data.IDbConnection.ConnectionTimeout"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.SimpleProfiledConnection.Database">
            <inheritdoc cref="P:System.Data.IDbConnection.Database"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.SimpleProfiledConnection.State">
            <inheritdoc cref="P:System.Data.IDbConnection.State"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.SimpleProfiledConnection.WrappedConnection">
            <summary>
            Gets the internally wrapped <see cref="T:System.Data.IDbConnection"/>.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledConnection.#ctor(System.Data.IDbConnection,StackExchange.Profiling.Data.IDbProfiler)">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.Profiling.Data.SimpleProfiledConnection"/> class.
            Creates a simple profiled connection instance.
            </summary>
            <param name="connection">The database connection to wrap.</param>
            <param name="profiler">The profiler to use.</param>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledConnection.BeginTransaction">
            <inheritdoc cref="M:System.Data.IDbConnection.BeginTransaction"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledConnection.BeginTransaction(System.Data.IsolationLevel)">
            <inheritdoc cref="M:System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledConnection.ChangeDatabase(System.String)">
            <inheritdoc cref="M:System.Data.IDbConnection.ChangeDatabase(System.String)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledConnection.CreateCommand">
            <inheritdoc cref="M:System.Data.IDbConnection.CreateCommand"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledConnection.Close">
            <inheritdoc cref="M:System.Data.IDbConnection.Close"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledConnection.Open">
            <inheritdoc cref="M:System.Data.IDbConnection.Open"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledConnection.Dispose">
            <summary>
            Releases all resources used by the connection.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledConnection.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the connection and optionally releases the managed resources.
            </summary>
            <param name="disposing">false if the dispose is called from a <c>finalizer</c></param>
        </member>
        <member name="T:StackExchange.Profiling.Data.SimpleProfiledDataReader">
            <summary>
            A simple profiled data reader.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.#ctor(System.Data.IDataReader,StackExchange.Profiling.Data.IDbProfiler)">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.Profiling.Data.SimpleProfiledDataReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="profiler">The profiler.</param>
            <exception cref="T:System.ArgumentNullException">Throws when the <paramref name="reader"/> is <c>null</c>.</exception>
        </member>
        <member name="P:StackExchange.Profiling.Data.SimpleProfiledDataReader.Depth">
            <inheritdoc cref="P:System.Data.IDataReader.Depth"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.SimpleProfiledDataReader.FieldCount">
            <inheritdoc cref="P:System.Data.IDataRecord.FieldCount"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.SimpleProfiledDataReader.IsClosed">
            <inheritdoc cref="P:System.Data.IDataReader.IsClosed"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.SimpleProfiledDataReader.RecordsAffected">
            <inheritdoc cref="P:System.Data.IDataReader.RecordsAffected"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.SimpleProfiledDataReader.Item(System.String)">
            <inheritdoc cref="P:System.Data.Common.DbDataReader.Item(System.String)"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.SimpleProfiledDataReader.Item(System.Int32)">
            <inheritdoc cref="P:System.Data.Common.DbDataReader.Item(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.GetBoolean(System.Int32)">
            <inheritdoc cref="M:System.Data.IDataRecord.GetBoolean(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.GetByte(System.Int32)">
            <inheritdoc cref="M:System.Data.IDataRecord.GetByte(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.GetChar(System.Int32)">
            <inheritdoc cref="M:System.Data.IDataRecord.GetChar(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.GetData(System.Int32)">
            <inheritdoc cref="M:System.Data.IDataRecord.GetData(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.GetDataTypeName(System.Int32)">
            <inheritdoc cref="M:System.Data.IDataRecord.GetDataTypeName(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.GetDateTime(System.Int32)">
            <inheritdoc cref="M:System.Data.IDataRecord.GetDateTime(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.GetDecimal(System.Int32)">
            <inheritdoc cref="M:System.Data.IDataRecord.GetDecimal(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.GetDouble(System.Int32)">
            <inheritdoc cref="M:System.Data.IDataRecord.GetDouble(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.GetFieldType(System.Int32)">
            <inheritdoc cref="M:System.Data.IDataRecord.GetFieldType(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.GetFloat(System.Int32)">
            <inheritdoc cref="M:System.Data.IDataRecord.GetFloat(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.GetGuid(System.Int32)">
            <inheritdoc cref="M:System.Data.IDataRecord.GetGuid(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.GetInt16(System.Int32)">
            <inheritdoc cref="M:System.Data.IDataRecord.GetInt32(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.GetInt32(System.Int32)">
            <inheritdoc cref="M:System.Data.IDataRecord.GetInt32(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.GetInt64(System.Int32)">
            <inheritdoc cref="M:System.Data.IDataRecord.GetInt64(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.GetName(System.Int32)">
            <inheritdoc cref="M:System.Data.IDataRecord.GetName(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.GetOrdinal(System.String)">
            <inheritdoc cref="M:System.Data.IDataRecord.GetOrdinal(System.String)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.GetString(System.Int32)">
            <inheritdoc cref="M:System.Data.IDataRecord.GetString(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.GetValue(System.Int32)">
            <inheritdoc cref="M:System.Data.IDataRecord.GetValue(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.GetValues(System.Object[])">
            <inheritdoc cref="M:System.Data.IDataRecord.GetValues(System.Object[])"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.IsDBNull(System.Int32)">
            <inheritdoc cref="M:System.Data.IDataRecord.IsDBNull(System.Int32)"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.Close">
            <inheritdoc cref="M:System.Data.IDataReader.Close"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.GetSchemaTable">
            <inheritdoc cref="M:System.Data.IDataReader.GetSchemaTable"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.NextResult">
            <inheritdoc cref="M:System.Data.IDataReader.NextResult"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.Read">
            <inheritdoc cref="M:System.Data.IDataReader.Read"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.Dispose">
            <summary>
            Releases all resources used by this reader.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledDataReader.Dispose(System.Boolean)">
            <summary>
            Releases the managed resources used by this reader and optionally releases the unmanaged resources.
            </summary>
            <param name="disposing">false if the dispose is called from a <c>finalizer</c></param>
        </member>
        <member name="T:StackExchange.Profiling.Data.SimpleProfiledTransaction">
            <summary>
            A general implementation of <see cref="T:System.Data.IDbTransaction"/> that is used to
            wrap profiling information around calls to it.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledTransaction.#ctor(System.Data.IDbTransaction,StackExchange.Profiling.Data.SimpleProfiledConnection)">
            <summary>
            Creates a new wrapped <see cref="T:System.Data.IDbTransaction"/>
            </summary>
            <param name="transaction">The transaction to wrap.</param>
            <param name="connection">The already-wrapped connection.</param>
            <exception cref="T:System.ArgumentNullException">Throws when the <paramref name="transaction"/> or <paramref name="connection"/> is <c>null</c>.</exception>
        </member>
        <member name="P:StackExchange.Profiling.Data.SimpleProfiledTransaction.WrappedTransaction">
            <summary>
            Gets the internal wrapped transaction.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Data.SimpleProfiledTransaction.Connection">
            <inheritdoc cref="P:System.Data.IDbTransaction.Connection"/>
        </member>
        <member name="P:StackExchange.Profiling.Data.SimpleProfiledTransaction.IsolationLevel">
            <inheritdoc cref="P:System.Data.IDbTransaction.IsolationLevel"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledTransaction.Commit">
            <inheritdoc cref="M:System.Data.IDbTransaction.Commit"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledTransaction.Rollback">
            <inheritdoc cref="M:System.Data.IDbTransaction.Rollback"/>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledTransaction.Dispose">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Data.IDbTransaction"/>.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Data.SimpleProfiledTransaction.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Data.IDbTransaction"/>.
            </summary>
            <param name="disposing">false if being called from a <c>finalizer</c></param>
        </member>
        <member name="T:StackExchange.Profiling.Internal.DiagnosticInitializer">
            <summary>
            Class used to initialize MiniProfiler diagnostic listeners.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Internal.DiagnosticInitializer.#ctor(System.Collections.Generic.IEnumerable{StackExchange.Profiling.Internal.IMiniProfilerDiagnosticListener})">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.Profiling.Internal.DiagnosticInitializer"/> class.
            </summary>
            <param name="diagnosticListeners">The diagnostic listeners to register</param>
        </member>
        <member name="M:StackExchange.Profiling.Internal.DiagnosticInitializer.Start">
            <summary>
            Subscribes diagnostic listeners to all current (and future) sources.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Internal.DiagnosticInitializer.Dispose">
            <summary>
            Dispose this initializer, including all subscriptions.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Internal.DiagnosticInitializer.Dispose(System.Boolean)">
            <summary>
            Dispose this initializer, including all subscriptions.
            </summary>
            <param name="disposing">Whether we're immediately disposing.</param>
        </member>
        <member name="T:StackExchange.Profiling.Internal.ExtensionMethods">
            <summary>
            Common extension methods to use only in this project.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Internal.ExtensionMethods.IsNullOrWhiteSpace(System.String)">
            <summary>
            Answers true if this String is either null or empty.
            </summary>
            <param name="value">The string to check.</param>
        </member>
        <member name="M:StackExchange.Profiling.Internal.ExtensionMethods.HasValue(System.String)">
            <summary>
            Answers true if this String is neither null or empty.
            </summary>
            <param name="value">The string to check.</param>
        </member>
        <member name="M:StackExchange.Profiling.Internal.ExtensionMethods.Truncate(System.String,System.Int32)">
            <summary>
            Chops off a string at the specified length and accounts for smaller length
            </summary>
            <param name="s">The string to truncate.</param>
            <param name="maxLength">The length to truncate to.</param>
        </member>
        <member name="M:StackExchange.Profiling.Internal.ExtensionMethods.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Checks if a string contains another one.
            Why the hell isn't this in the BCL already?
            </summary>
            <param name="s">The string to check for presence in.</param>
            <param name="value">The value to check presence of.</param>
            <param name="comparison">The <see cref="T:System.StringComparison"/> to use when comparing.</param>
            <returns>Whether <paramref name="value"/> is contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:StackExchange.Profiling.Internal.ExtensionMethods.EnsureTrailingSlash(System.String)">
            <summary>
            Removes trailing / characters from a path and leaves just one
            </summary>
            <param name="input">The string to ensure a trailing slash on.</param>
        </member>
        <member name="M:StackExchange.Profiling.Internal.ExtensionMethods.ToJson(System.Collections.Generic.List{System.Guid})">
            <summary>
            Converts a List{Guid} into a JSON representation
            </summary>
            <param name="guids">The GUIDs to convert.</param>
            <returns>A JSON representation of the GUIDs.</returns>
        </member>
        <member name="M:StackExchange.Profiling.Internal.ExtensionMethods.ToJson(StackExchange.Profiling.MiniProfiler,System.Boolean)">
            <summary>
            Renders the parameter <see cref="T:StackExchange.Profiling.MiniProfiler"/> to JSON.
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to serialize.</param>
            <param name="htmlEscape">Whether to HTML escape the output.</param>
        </member>
        <member name="M:StackExchange.Profiling.Internal.ExtensionMethods.ToJson(System.Object)">
            <summary>
            Serializes <paramref name="o"/> to a JSON string.
            </summary>
            <param name="o">The instance to serialize.</param>
            <returns>The resulting JSON object as a string.</returns>
        </member>
        <member name="M:StackExchange.Profiling.Internal.ExtensionMethods.FromJson``1(System.String)">
            <summary>
            Deserializes <paramref name="s"/> to an object of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to deserialize to.</typeparam>
            <param name="s">The string to deserialize.</param>
            <returns>The object resulting from the given string.</returns>
        </member>
        <member name="M:StackExchange.Profiling.Internal.ExtensionMethods.TryRemove``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1@)">
            <summary>
            <see cref="T:System.Collections.Generic.Dictionary`2"/> equivalent of ConcurrentDictionary's .TryRemove();
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="dict">The dictionary to attempt removal from.</param>
            <param name="key">The key to attempt removal of.</param>
            <param name="value">The value found (if it was found) from the dictionary.</param>
            <returns>Whether the key was removed.</returns>
        </member>
        <member name="T:StackExchange.Profiling.Internal.IDataParameterExtensions">
            <summary>
            Internal MiniProfiler extensions, not meant for consumption.
            This can and probably will break without warning. Don't use the .Internal namespace directly.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Internal.IDataParameterExtensions.GetStringValue(System.Data.IDataParameter)">
            <summary>
            Returns the value of <paramref name="parameter"/> suitable for storage/display.
            </summary>
            <param name="parameter">The parameter to get a value for.</param>
        </member>
        <member name="M:StackExchange.Profiling.Internal.IDataParameterExtensions.GetSize(System.Data.IDbDataParameter)">
            <summary>
            Gets the size of a <see cref="T:System.Data.IDbDataParameter"/> (e.g. nvarchar(20) would be 20).
            </summary>
            <param name="parameter">The parameter to get the size of.</param>
            <returns>The size of the parameter, or 0 if nullable or unlimited.</returns>
        </member>
        <member name="T:StackExchange.Profiling.Internal.IDbCommandExtensions">
            <summary>
            Internal MiniProfiler extensions, not meant for consumption.
            This can and probably will break without warning. Don't use the .Internal namespace directly.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Internal.IDbCommandExtensions.GetTiming(System.Data.IDbCommand,System.String,StackExchange.Profiling.MiniProfiler,System.String)">
            <summary>
            Gets a <see cref="T:StackExchange.Profiling.CustomTiming"/> for the relational parameters passed.
            </summary>
            <param name="command">The <see cref="T:System.Data.Common.DbCommand"/> to time.</param>
            <param name="commandType">The command execution type (e.g. ExecuteNonQuery).</param>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to attach the timing to.</param>
            <param name="customType">The type for this command to show up as (which custom column).</param>
            <returns>A custom timing (which should be disposed or stopped!) for <paramref name="command"/>.</returns>
        </member>
        <member name="M:StackExchange.Profiling.Internal.IDbCommandExtensions.GetReadableCommand(System.Data.IDbCommand)">
            <summary>
            Gets a command's text, adding space around crowded commas for readability.
            </summary>
            <param name="command">The command to space out.</param>
        </member>
        <member name="M:StackExchange.Profiling.Internal.IDbCommandExtensions.GetParameters(System.Data.IDbCommand)">
            <summary>
            Returns better parameter information for <paramref name="command"/>.
            Returns <c>null</c> if no parameters are present.
            </summary>
            <param name="command">The command to get parameters for.</param>
        </member>
        <member name="T:StackExchange.Profiling.Internal.IMiniProfilerDiagnosticListener">
            <summary>
            Internal MiniProfiler interface for registering DiagnosticListeners, not meant for consumption.
            This can and probably will break without warning. Don't use the .Internal namespace directly.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.IMiniProfilerDiagnosticListener.ListenerName">
            <summary>
            Gets a value indicating which listener this instance should be subscribed to.
            </summary>
        </member>
        <member name="T:StackExchange.Profiling.Internal.MiniProfilerBaseOptions">
            <summary>
            Various configuration properties for MiniProfiler.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.Version">
            <summary>
            Assembly version of this dank MiniProfiler.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.VersionHash">
            <summary>
            The hash to use for file cache breaking, this is automatically calculated.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.EnableDebugMode">
            <summary>
            Whether to enable verbose diagnostics mode in MiniProfiler.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.ExcludedAssemblies">
            <summary>
            Assemblies to exclude from the stack trace report.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.ExcludedTypes">
            <summary>
            Types to exclude from the stack trace report.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.ExcludedMethods">
            <summary>
            Methods to exclude from the stack trace report.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.IgnoredPaths">
            <summary>
            When <see cref="M:StackExchange.Profiling.IAsyncProfilerProvider.Start(System.String,StackExchange.Profiling.Internal.MiniProfilerBaseOptions)"/> is called, if the current request URL contains any items in this property,
            no profiler will be instantiated and no results will be displayed.
            Default value is { "/content/", "/scripts/", "/favicon.ico" }.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.MaxUnviewedProfiles">
            <summary>
            The maximum number of unviewed profiler sessions (set this low cause we don't want to blow up headers)
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.StackMaxLength">
            <summary>
            The max length of the stack string to report back; defaults to 120 chars.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.TrackConnectionOpenClose">
            <summary>
            Whether to track open and close for connections to things like database servers.
            While this is useful for debugging connection pools and things, it can be noisy in other cases.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.TrivialDurationThresholdMilliseconds">
            <summary>
            Any Timing step with a duration less than or equal to this will be hidden by default in the UI; defaults to 2.0 ms.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.PopupShowTimeWithChildren">
            <summary>
            Dictates if the "time with children" column is displayed by default, defaults to false.
            For a per-page override you can use .RenderIncludes(showTimeWithChildren: true/false)
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.PopupShowTrivial">
            <summary>
            Dictates if trivial timings are displayed by default, defaults to false.
            For a per-page override you can use .RenderIncludes(showTrivial: true/false)
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.PopupMaxTracesToShow">
            <summary>
            Determines how many traces to show before removing the oldest; defaults to 15.
            For a per-page override you can use .RenderIncludes(maxTracesToShow: 10)
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.PopupRenderPosition">
            <summary>
            Dictates on which side of the page the profiler popup button is displayed; defaults to left.
            For a per-page override you can use .RenderIncludes(position: RenderPosition.Left/Right)
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.PopupDecimalPlaces">
            <summary>
            Determines how many decimal places to show in popup timings.
            Note: precision maxes out at 2 decimal places in recorded data.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.ColorScheme">
            <summary>
            Determines which color scheme to use when rendering (the class to apply for CSS styling).
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.PopupToggleKeyboardShortcut">
            <summary>
            Allows showing/hiding of popup results buttons via keyboard.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.PopupStartHidden">
            <summary>
            When true, results buttons will not initially be shown, requiring keyboard activation via <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.PopupToggleKeyboardShortcut"/>.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.ShowControls">
            <summary>
            Determines if min-max, clear, etc are rendered; defaults to false.
            For a per-page override you can use .RenderIncludes(showControls: true/false)
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.IgnoredDuplicateExecuteTypes">
            <summary>
            Custom timing ExecuteTypes to ignore as duplicates in the UI.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.ExcludeStackTraceSnippetFromCustomTimings">
            <summary>
            By default, <see cref="T:StackExchange.Profiling.CustomTiming"/>s created by this assembly will grab a stack trace to help
            locate where Remote Procedure Calls are being executed.  When this setting is true, no stack trace
            will be collected, possibly improving profiler performance.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.Storage">
            <summary>
            Understands how to save and load MiniProfilers. Used for caching between when
            a profiling session ends and results can be fetched to the client, and for showing shared, full-page results.
            </summary>
            <remarks>
            The normal profiling session life-cycle is as follows:
            <list type="number">
                <item>Request begins</item>
                <item>Profiler is started</item>
                <item>Normal page/controller/request execution</item>
                <item>Profiler is stopped</item>
                <item>Profiler is cached with <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.Storage"/>'s implementation of <see cref="M:StackExchange.Profiling.Storage.IAsyncStorage.Save(StackExchange.Profiling.MiniProfiler)"/></item>
                <item>Request ends</item>
                <item>Page is displayed and profiling results are AJAX-fetched down, pulling cached results from <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.Storage"/>'s implementation of <see cref="M:StackExchange.Profiling.Storage.IAsyncStorage.Load(System.Guid)"/></item>
            </list>
            </remarks>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.SqlFormatter">
            <summary>
            The formatter applied to any SQL before being set in a <see cref="P:StackExchange.Profiling.CustomTiming.CommandString"/>.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.ProfilerProvider">
            <summary>
            The <see cref="T:StackExchange.Profiling.IAsyncProfilerProvider"/> class that is used to run MiniProfiler.
            </summary>
            <remarks>
            If not set explicitly, will default to <see cref="T:StackExchange.Profiling.DefaultProfilerProvider"/>
            </remarks>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.StopwatchProvider">
            <summary>
            Allows switching out stopwatches for unit testing.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.StartProfiler(System.String)">
            <summary>
            Starts a new MiniProfiler from the <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.ProfilerProvider"/>.
            Shortcut for Options.ProfilerProvider.Start.
            Note that this may be <c>null</c> if the provider did not actually start a profiler (e.g. because of ignore rules).
            </summary>
            <param name="profilerName">
            Allows explicit naming of the new profiling session; when null, an appropriate default will be used, e.g. for
            a web request, the URL will be used for the overall session name.
            </param>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.TimingInstrumentationProvider">
            <summary>
            Called whenever a new <cref see="Timing" /> is started.
            The <cref see="IDiposable.Dispose" /> method of the returned object is called at the same time as the <cref see="Timing" /> is <cref see="Timing.Stop" />ed.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.OnConfigure">
            <summary>
            Called when passed to <see cref="M:StackExchange.Profiling.MiniProfiler.Configure``1(``0)"/>.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.OnInternalError">
            <summary>
            An action to call when MiniProfiler has an internal error. For logging, etc.
            </summary>
        </member>
        <member name="T:StackExchange.Profiling.Internal.MiniProfilerBaseOptionsExtensions">
            <summary>
            Internal extension methods for <see cref="T:StackExchange.Profiling.Internal.MiniProfilerBaseOptions"/> and inheritors.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Internal.MiniProfilerBaseOptionsExtensions.ExpireAndGetUnviewed(StackExchange.Profiling.Internal.MiniProfilerBaseOptions,System.String)">
            <summary>
            Synchronously gets unviewed profiles for the user,
            expiring any above the <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.MaxUnviewedProfiles"/> count.
            </summary>
            <param name="options">The options to operate against on.</param>
            <param name="user">The user to get profiler IDs for.</param>
            <returns>The list of IDs</returns>
        </member>
        <member name="M:StackExchange.Profiling.Internal.MiniProfilerBaseOptionsExtensions.ExpireAndGetUnviewedAsync(StackExchange.Profiling.Internal.MiniProfilerBaseOptions,System.String)">
            <summary>
            Asynchronously gets unviewed profiles for the user,
            expiring any above the <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.MaxUnviewedProfiles"/> count.
            </summary>
            <param name="options">The options to operate against on.</param>
            <param name="user">The user to get profiler IDs for.</param>
            <returns>The list of IDs</returns>
        </member>
        <member name="T:StackExchange.Profiling.Internal.Render">
            <summary>
            Internal MiniProfiler extensions, not meant for consumption.
            This can and probably will break without warning. Don't use the .Internal namespace directly.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Internal.Render.Includes(StackExchange.Profiling.MiniProfiler,System.String,System.Boolean,StackExchange.Profiling.RenderOptions,System.Collections.Generic.List{System.Guid})">
            <summary>
            Renders script tag for including MiniProfiler.
            </summary>
            <param name="profiler">The profiler to render a tag for.</param>
            <param name="path">The root path that MiniProfiler is being served from.</param>
            <param name="isAuthorized">Whether the current user is authorized for MiniProfiler.</param>
            <param name="renderOptions">The option overrides (if any) to use rendering this MiniProfiler.</param>
            <param name="requestIDs">The request IDs to fetch for this render.</param>
        </member>
        <member name="M:StackExchange.Profiling.Internal.Render.Includes(StackExchange.Profiling.MiniProfiler,System.String,System.Boolean,System.Collections.Generic.List{System.Guid},System.Nullable{StackExchange.Profiling.RenderPosition},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Renders script tag for including MiniProfiler.
            </summary>
            <param name="profiler">The profiler to render a tag for.</param>
            <param name="path">The root path that MiniProfiler is being served from.</param>
            <param name="isAuthorized">Whether the current user is authorized for MiniProfiler.</param>
            <param name="requestIDs">The request IDs to fetch for this render.</param>
            <param name="position">The UI position to render the profiler in (defaults to <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.PopupRenderPosition"/>).</param>
            <param name="showTrivial">Whether to show trivial timings column initially or not (defaults to <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.PopupShowTrivial"/>).</param>
            <param name="showTimeWithChildren">Whether to show time with children column initially or not (defaults to <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.PopupShowTimeWithChildren"/>).</param>
            <param name="maxTracesToShow">The maximum number of profilers to show (before the oldest is removed - defaults to <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.PopupMaxTracesToShow"/>).</param>
            <param name="showControls">Whether to show the controls (defaults to <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.ShowControls"/>).</param>
            <param name="startHidden">Whether to start hidden (defaults to <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.PopupStartHidden"/>).</param>
        </member>
        <member name="M:StackExchange.Profiling.Internal.Render.SingleResultHtml(StackExchange.Profiling.MiniProfiler,System.String)">
            <summary>
            Renders a full HTML page for the share link in MiniProfiler.
            </summary>
            <param name="profiler">The profiler to render a tag for.</param>
            <param name="path">The root path that MiniProfiler is being served from.</param>
            <returns>A full HTML page for this MiniProfiler.</returns>
        </member>
        <member name="M:StackExchange.Profiling.Internal.Render.ResultListHtml(StackExchange.Profiling.Internal.MiniProfilerBaseOptions,System.String)">
            <summary>
            Renders a full HTML page for the share link in MiniProfiler.
            </summary>
            <param name="options">The options to render for.</param>
            <param name="path">The root path that MiniProfiler is being served from.</param>
            <returns>A full HTML page for this MiniProfiler.</returns>
        </member>
        <member name="T:StackExchange.Profiling.Internal.ResultRequest">
            <summary>
            JSON format sent on the request to /results.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.ResultRequest.Id">
            <summary>
            The ID of the MiniProfiler both being requested, and that these client results are for.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.ResultRequest.Performance">
            <summary>
            The window.performace timings from the client.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.ResultRequest.Probes">
            <summary>
            The JavaScript client probes, if any.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.ResultRequest.RedirectCount">
            <summary>
            The amount of redirects made before the pageload.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.ResultRequest.TimingCount">
            <summary>
            The total count of timings on this request.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Internal.ResultRequest.TryParse(System.IO.Stream,StackExchange.Profiling.Internal.ResultRequest@)">
            <summary>
            Returns a deserialize object from an input stream, like an HTTP request body.
            </summary>
            <param name="stream">The stream to deserialize.</param>
            <param name="result">The resulting <see cref="T:StackExchange.Profiling.Internal.ResultRequest"/>, if successful.</param>
            <returns>A <see cref="T:StackExchange.Profiling.Internal.ResultRequest"/> object.</returns>
        </member>
        <member name="T:StackExchange.Profiling.Internal.StopwatchWrapper">
            <summary>
            The stopwatch wrapper MiniProfile uses, for internal usage.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Internal.StopwatchWrapper.StartNew">
            <summary>
            Initializes a new Stopwatch instance, sets the elapsed time property to zero, and starts measuring elapsed time.
            </summary>
            <returns>The <see cref="T:StackExchange.Profiling.Helpers.IStopwatch"/>.</returns>
        </member>
        <member name="M:StackExchange.Profiling.Internal.StopwatchWrapper.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:StackExchange.Profiling.Internal.StopwatchWrapper"/> class from being created.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.StopwatchWrapper.ElapsedTicks">
            <summary>
            Gets the total elapsed time measured by the current instance, in timer ticks.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.StopwatchWrapper.Frequency">
            <summary>
            Gets the frequency of the timer as the number of ticks per second. This field is read-only.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Internal.StopwatchWrapper.IsRunning">
            <summary>
            Gets a value indicating whether the Stopwatch timer is running.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Internal.StopwatchWrapper.Stop">
            <summary>
            Stops measuring elapsed time for an interval.
            </summary>
        </member>
        <member name="T:StackExchange.Profiling.Internal.StringBuilderCache">
            <summary>
            Provides optimized access to StringBuilder instances
            Credit: Marc Gravell (@marcgravell), Stack Exchange Inc.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Internal.StringBuilderCache.Get(System.Int32)">
            <summary>
            Obtain a StringBuilder instance; this could be a recycled instance, or could be new.
            </summary>
            <param name="capacity">The capacity to start the fetched <see cref="T:System.Text.StringBuilder"/> at.</param>
        </member>
        <member name="M:StackExchange.Profiling.Internal.StringBuilderCache.ToStringRecycle(System.Text.StringBuilder)">
            <summary>
            Get the string contents of a StringBuilder and recycle the instance at the same time.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to recycle.</param>
        </member>
        <member name="M:StackExchange.Profiling.Internal.StringBuilderCache.ToStringRecycle(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Get the string contents of a StringBuilder and recycle the instance at the same time.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to recycle.</param>
            <param name="startIndex">The index to start at.</param>
            <param name="length">The amount of characters to get.</param>
        </member>
        <member name="M:StackExchange.Profiling.Internal.StringBuilderCache.Recycle(System.Text.StringBuilder)">
            <summary>
            Recycles a StringBuilder instance if possible.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder"/> to recycle.</param>
        </member>
        <member name="T:StackExchange.Profiling.Helpers.IStopwatch">
            <summary>
            The Stopwatch interface.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Helpers.IStopwatch.ElapsedTicks">
            <summary>
            Gets the total elapsed time measured by the current instance, in timer ticks.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Helpers.IStopwatch.Frequency">
            <summary>
            Gets the frequency of the timer as the number of ticks per second. This field is read-only.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Helpers.IStopwatch.IsRunning">
            <summary>
            Gets a value indicating whether the Stopwatch timer is running.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Helpers.IStopwatch.Stop">
            <summary>
            Stops measuring elapsed time for an interval.
            </summary>
        </member>
        <member name="T:StackExchange.Profiling.Helpers.ProfilerSortedKey">
            <summary>
            Identifies a MiniProfiler result and only contains the needed info for sorting a list of profiling sessions.
            </summary>
            <remarks>SortedList on uses the comparer for both key lookups and insertion.</remarks>
        </member>
        <member name="P:StackExchange.Profiling.Helpers.ProfilerSortedKey.Id">
            <summary>
            Profiler Id.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Helpers.ProfilerSortedKey.Started">
            <summary>
            Profiler start date.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Helpers.ProfilerSortedKey.#ctor(StackExchange.Profiling.MiniProfiler)">
            <summary>
            Creates a key to use in a <see cref="T:System.Collections.Generic.SortedList`2"/>.
            </summary>
            <param name="profiler"></param>
        </member>
        <member name="M:StackExchange.Profiling.Helpers.ProfilerSortedKey.CompareTo(StackExchange.Profiling.Helpers.ProfilerSortedKey)">
            <summary>
            Compares this <see cref="T:StackExchange.Profiling.Helpers.ProfilerSortedKey"/> to another.
            </summary>
            <param name="other">The <see cref="T:StackExchange.Profiling.Helpers.ProfilerSortedKey"/> to compare</param>
        </member>
        <member name="T:StackExchange.Profiling.Helpers.ProfilerSortedKeyExtensions">
            <summary>
            Helpers for <see cref="T:StackExchange.Profiling.Helpers.ProfilerSortedKey"/>.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Helpers.ProfilerSortedKeyExtensions.BinaryClosestSearch``1(System.Collections.Generic.SortedList{StackExchange.Profiling.Helpers.ProfilerSortedKey,``0},System.DateTime)">
            <summary>
            Perform a binary search of the given SortedList.
            </summary>
            <typeparam name="T">SortedList value type.</typeparam>
            <param name="list">List to search.</param>
            <param name="date">The date to find the index of.</param>
            <returns>The index of the nearest occurrence.</returns>
        </member>
        <member name="T:StackExchange.Profiling.Helpers.StackTraceSnippet">
            <summary>
            Gets part of a stack trace containing only methods we care about.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Helpers.StackTraceSnippet.Get(StackExchange.Profiling.Internal.MiniProfilerBaseOptions)">
            <summary>
            Gets the current formatted and filtered stack trace.
            </summary>
            <param name="options">The options to use for this StackTrace fetch.</param>
            <returns>Space separated list of methods</returns>
        </member>
        <member name="T:StackExchange.Profiling.Helpers.StackTraceUtils">
            <summary>
            StackTrace utilities, from Exceptional
            </summary>
            <remarks>
            ...need to make this a source package...
            </remarks>
        </member>
        <member name="M:StackExchange.Profiling.Helpers.StackTraceUtils.HtmlPrettify(System.String,System.Nullable{System.Int32})">
            <summary>
            Converts a stack trace to formatted HTML with styling and linkifiation.
            </summary>
            <param name="stackTrace">The stack trace to HTMLify.</param>
            <param name="commonStart">The frame index to start marking as common (e.g. to grey out beneath).</param>
            <returns>An HTML-pretty version of the stack trace.</returns>
        </member>
        <member name="M:StackExchange.Profiling.Helpers.StackTraceUtils.NormalizeMethodName(System.String)">
            <summary>
            .NET Core changes methods so generics render as Method[T], this normalizes it.
            </summary>
        </member>
        <member name="T:StackExchange.Profiling.MiniProfiler">
            <summary>
            A single MiniProfiler can be used to represent any number of steps/levels in a call-graph, via Step()
            </summary>
            <remarks>Totally baller.</remarks>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfiler.Options">
            <summary>
            The options this profiler uses, assigned at creation time.
            It defaults for the global options, if present, as a fall back for all operations.
            The vast majority of use cases will be a single options instance, so this works pretty well.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfiler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.Profiling.MiniProfiler"/> class.
            Obsolete - used for serialization.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfiler.#ctor(System.String,StackExchange.Profiling.Internal.MiniProfilerBaseOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.Profiling.MiniProfiler"/> class. Creates and starts a new MiniProfiler
            for the root <paramref name="name"/>.
            </summary>
            <param name="name">The name of this <see cref="T:StackExchange.Profiling.MiniProfiler"/>, typically a URL.</param>
            <param name="options">The options to use for this MiniProfiler.</param>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfiler.IsActive">
            <summary>
            Whether the profiler is currently profiling
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfiler.Id">
            <summary>
            Gets or sets the profiler id.
            Identifies this Profiler so it may be stored/cached.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfiler.Name">
            <summary>
            Gets or sets a display name for this profiling session.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfiler.Started">
            <summary>
            Gets or sets when this profiler was instantiated, in UTC time.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfiler.DurationMilliseconds">
            <summary>
            Gets the milliseconds, to one decimal place, that this MiniProfiler ran.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfiler.MachineName">
            <summary>
            Gets or sets where this profiler was run.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfiler.CustomLinks">
            <summary>
            Keys are names, values are URLs, allowing additional links to be added to a profiler result, e.g. perhaps a deeper
            diagnostic page for the current request.
            </summary>
            <remarks>
            Use <see cref="M:StackExchange.Profiling.MiniProfilerExtensions.AddCustomLink(StackExchange.Profiling.MiniProfiler,System.String,System.String)"/> to easily add a name/URL pair to this dictionary.
            </remarks>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfiler.CustomLinksJson">
            <summary>
            JSON used to store Custom Links. Do not touch.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfiler.Root">
            <summary>
            Gets or sets the root timing.
            The first <see cref="T:StackExchange.Profiling.Timing"/> that is created and started when this profiler is instantiated.
            All other <see cref="T:StackExchange.Profiling.Timing"/>s will be children of this one.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfiler.RootTimingId">
            <summary>
            Id of Root Timing. Used for Sql Storage purposes.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfiler.ClientTimings">
            <summary>
            Gets or sets timings collected from the client
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfiler.ClientTimingsRedirectCount">
            <summary>
            RedirectCount in ClientTimings. Used for sql storage.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfiler.User">
            <summary>
            Gets or sets a string identifying the user/client that is profiling this request.
            </summary>
            <remarks>
            If this is not set manually at some point, the UserIdProvider implementation will be used;
            by default, this will be the current request's IP address.
            </remarks>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfiler.HasUserViewed">
            <summary>
            Returns true when this MiniProfiler has been viewed by the <see cref="P:StackExchange.Profiling.MiniProfiler.User"/> that recorded it.
            </summary>
            <remarks>
            Allows POSTs that result in a redirect to be profiled. <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.Storage"/> implementation
            will keep a list of all profilers that haven't been fetched down.
            </remarks>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfiler.Head">
            <summary>
            Gets or sets points to the currently executing Timing.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfiler.ElapsedTicks">
            <summary>
            Gets the ticks since this MiniProfiler was started.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfiler.Stopwatch">
            <summary>
            Gets the timer, for unit testing, returns the timer.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfiler.GetStopwatch">
            <summary>
            Gets the internal timer for this MiniProfile, primarily for unit testing.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfiler.Current">
            <summary>
            Gets the currently running MiniProfiler for the current context; null if no MiniProfiler was started.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfiler.Storage">
            <summary>
            A <see cref="T:StackExchange.Profiling.Storage.IAsyncStorage"/> strategy to use for the current profiler.
            </summary>
            <remarks>Used to set custom storage for an individual request</remarks>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfiler.Stop(System.Boolean)">
            <summary>
            Ends the current profiling session, if one exists.
            </summary>
            <param name="discardResults">
            When true, clears the <see cref="P:StackExchange.Profiling.MiniProfiler.Current"/>, allowing profiling to
            be prematurely stopped and discarded. Useful for when a specific route does not need to be profiled.
            </param>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfiler.StopAsync(System.Boolean)">
            <summary>
            Asynchronously ends the current profiling session, if one exists.
            This invokes async saving all the way down if the providers support it.
            </summary>
            <param name="discardResults">
            When true, clears the <see cref="P:StackExchange.Profiling.MiniProfiler.Current"/>, allowing profiling to
            be prematurely stopped and discarded. Useful for when a specific route does not need to be profiled.
            </param>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfiler.InnerStop">
            <summary>
            Shared stop bits for <see cref="M:StackExchange.Profiling.MiniProfiler.Stop(System.Boolean)"/> and <see cref="M:StackExchange.Profiling.MiniProfiler.StopAsync(System.Boolean)"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfiler.FromJson(System.String)">
            <summary>
            Deserializes the JSON string parameter to a <see cref="T:StackExchange.Profiling.MiniProfiler"/>.
            </summary>
            <param name="json">The string to deserialize into a <see cref="T:StackExchange.Profiling.MiniProfiler"/>.</param>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfiler.ToString">
            <summary>
            Returns the <see cref="P:StackExchange.Profiling.MiniProfiler.Root"/>'s <see cref="P:StackExchange.Profiling.Timing.Name"/> and <see cref="P:StackExchange.Profiling.MiniProfiler.DurationMilliseconds"/> this profiler recorded.
            </summary>
            <returns>A string containing the recording information</returns>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfiler.Equals(System.Object)">
            <summary>
            Returns true if Ids match.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare to.</param>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfiler.GetHashCode">
            <summary>
            Returns hash code of Id.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfiler.GetTimingHierarchy">
            <summary>
            Walks the <see cref="T:StackExchange.Profiling.Timing"/> hierarchy contained in this profiler, starting with <see cref="P:StackExchange.Profiling.MiniProfiler.Root"/>, and returns each Timing found.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfiler.Clone">
            <summary>
            Create a DEEP clone of this MiniProfiler.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfiler.GetRoundedMilliseconds(System.Int64)">
            <summary>
            Returns milliseconds based on Stopwatch's Frequency, rounded to two decimal places.
            </summary>
            <param name="ticks">The tick count to round.</param>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfiler.GetDurationMilliseconds(System.Int64)">
            <summary>
            Returns how many milliseconds have elapsed since <paramref name="startTicks"/> was recorded.
            </summary>
            <param name="startTicks">The start tick count.</param>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfiler.StackExchange#Profiling#Data#IDbProfiler#ExecuteStart(System.Data.IDbCommand,StackExchange.Profiling.Data.SqlExecuteType)">
            <summary>
            Tracks when 'command' is started.
            </summary>
            <param name="profiledDbCommand">The <see cref="T:System.Data.IDbCommand"/> that started.</param>
            <param name="executeType">The execution type of the <paramref name="profiledDbCommand"/>.</param>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfiler.StackExchange#Profiling#Data#IDbProfiler#ExecuteFinish(System.Data.IDbCommand,StackExchange.Profiling.Data.SqlExecuteType,System.Data.Common.DbDataReader)">
            <summary>
            Finishes profiling for 'command', recording durations.
            </summary>
            <param name="profiledDbCommand">The <see cref="T:System.Data.IDbCommand"/> that finished.</param>
            <param name="executeType">The execution type of the <paramref name="profiledDbCommand"/>.</param>
            <param name="reader">(Optional) the reader piece of the <paramref name="profiledDbCommand"/>, if it exists.</param>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfiler.StackExchange#Profiling#Data#IDbProfiler#ReaderFinish(System.Data.IDataReader)">
            <summary>
            Called when 'reader' finishes its iterations and is closed.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> that finished.</param>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfiler.StackExchange#Profiling#Data#IDbProfiler#OnError(System.Data.IDbCommand,StackExchange.Profiling.Data.SqlExecuteType,System.Exception)">
            <summary>
            Called when a command errors.
            </summary>
            <param name="profiledDbCommand">The <see cref="T:System.Data.IDbCommand"/> that finished.</param>
            <param name="executeType">The execution type of the <paramref name="profiledDbCommand"/>.</param>
            <param name="exception">The exception thrown.</param>
        </member>
        <member name="P:StackExchange.Profiling.MiniProfiler.DefaultOptions">
            <summary>
            Settings for context-less settings access.
            For example, every <see cref="T:StackExchange.Profiling.MiniProfiler"/> deserialized from a store would have these settings.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfiler.Configure``1(``0)">
            <summary>
            Saves the given <paramref name="options"/> as the global <see cref="P:StackExchange.Profiling.MiniProfiler.DefaultOptions"/> available for use globally.
            These are intended to be used by global/background operations where normal context access isn't available.
            </summary>
            <typeparam name="T">The specific type of <see cref="T:StackExchange.Profiling.Internal.MiniProfilerBaseOptions"/> to use.</typeparam>
            <param name="options">The options object 44to set for background access.</param>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfiler.StartNew(System.String)">
            <summary>
            Starts a new <see cref="T:StackExchange.Profiling.MiniProfiler"/> based on <see cref="P:StackExchange.Profiling.MiniProfiler.DefaultOptions"/>.
            Shortcut for DefaultOptions.ProfilerProvider.Start.
            Note that this may be <c>null</c> if the provider did not actually start a profiler (e.g. because of ignore rules).
            </summary>
            <param name="profilerName">
            Allows explicit naming of the new profiling session; when null, an appropriate default will be used, e.g. for
            a web request, the URL will be used for the overall session name.
            </param>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfiler.GetServerTimingHeader">
            <summary>
            Gets the Server-Timing header for this profiler, summarizing where time was spent for the browser.
            Example output: sql=9; "sql", redis=5; "redis", aspnet=20; "ASP.NET"
            </summary>
            <returns>A string, the value to put in a Server-Timing header.</returns>
        </member>
        <member name="T:StackExchange.Profiling.MiniProfilerExtensions">
            <summary>
            Contains helper methods that ease working with null <see cref="T:StackExchange.Profiling.MiniProfiler"/>s.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerExtensions.Inline``1(StackExchange.Profiling.MiniProfiler,System.Func{``0},System.String)">
            <summary>
            Wraps <paramref name="selector"/> in a <see cref="M:StackExchange.Profiling.MiniProfilerExtensions.Step(StackExchange.Profiling.MiniProfiler,System.String)"/> call and executes it, returning its result.
            </summary>
            <typeparam name="T">the type of result.</typeparam>
            <param name="profiler">The current profiling session or null.</param>
            <param name="selector">Method to execute and profile.</param>
            <param name="name">The <see cref="T:StackExchange.Profiling.Timing"/> step name used to label the profiler results.</param>
            <returns>the profiled result.</returns>
            <exception cref="T:System.ArgumentNullException">Throws when <paramref name="selector"/> is <c>null</c>.</exception>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerExtensions.Step(StackExchange.Profiling.MiniProfiler,System.String)">
            <summary>
            Returns an <see cref="T:StackExchange.Profiling.Timing"/> (<see cref="T:System.IDisposable"/>) that will time the code between its creation and disposal.
            </summary>
            <param name="profiler">The current profiling session or null.</param>
            <param name="name">A descriptive name for the code that is encapsulated by the resulting Timing's lifetime.</param>
            <returns>the profile step</returns>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerExtensions.StepIf(StackExchange.Profiling.MiniProfiler,System.String,System.Decimal,System.Boolean)">
            <summary>
            Returns an <see cref="T:StackExchange.Profiling.Timing"/> (<see cref="T:System.IDisposable"/>) that will time the code between its creation and disposal.
            Will only save the <see cref="T:StackExchange.Profiling.Timing"/> if total time taken exceeds <paramref name="minSaveMs" />.
            </summary>
            <param name="profiler">The current profiling session or <c>null</c>.</param>
            <param name="name">A descriptive name for the code that is encapsulated by the resulting Timing's lifetime.</param>
            <param name="minSaveMs">The minimum amount of time that needs to elapse in order for this result to be recorded.</param>
            <param name="includeChildren">Should the amount of time spent in child timings be included when comparing total time
            profiled with <paramref name="minSaveMs"/>? If true, will include children. If false will ignore children.</param>
            <returns>The created <see cref="T:StackExchange.Profiling.Timing"/>, if one was created.</returns>
            <remarks>If <paramref name="includeChildren"/> is set to true and a child is removed due to its use of StepIf, then the
            time spent in that time will also not count for the current StepIf calculation.</remarks>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerExtensions.CustomTiming(StackExchange.Profiling.MiniProfiler,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Returns a new <see cref="M:StackExchange.Profiling.MiniProfilerExtensions.CustomTiming(StackExchange.Profiling.MiniProfiler,System.String,System.String,System.String,System.Boolean)"/> that will automatically set its <see cref="P:StackExchange.Profiling.CustomTiming.StartMilliseconds"/>
            and <see cref="P:StackExchange.Profiling.CustomTiming.DurationMilliseconds"/>
            </summary>
            <param name="profiler">The current profiling session or null.</param>
            <param name="category">The category under which this timing will be recorded.</param>
            <param name="commandString">The command string that will be recorded along with this timing, for display in the MiniProfiler results.</param>
            <param name="executeType">Execute Type to be associated with the Custom Timing. Example: Get, Set, Insert, Delete</param>
            <param name="includeStackTrace">Whether to include the stack trace in this custom timing.</param>
            <remarks>
            Should be used like the <see cref="M:StackExchange.Profiling.MiniProfilerExtensions.Step(StackExchange.Profiling.MiniProfiler,System.String)"/> extension method
            </remarks>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerExtensions.CustomTimingIf(StackExchange.Profiling.MiniProfiler,System.String,System.String,System.Decimal,System.String,System.Boolean)">
            <summary>
            Returns a new <see cref="M:StackExchange.Profiling.MiniProfilerExtensions.CustomTiming(StackExchange.Profiling.MiniProfiler,System.String,System.String,System.String,System.Boolean)"/> that will automatically set its <see cref="P:StackExchange.Profiling.CustomTiming.StartMilliseconds"/>
            and <see cref="P:StackExchange.Profiling.CustomTiming.DurationMilliseconds"/>. Will only save the new <see cref="T:StackExchange.Profiling.Timing"/> if the total elapsed time
            takes more than <paramef name="minSaveMs" />.
            </summary>
            <param name="profiler">The current profiling session or null.</param>
            <param name="category">The category under which this timing will be recorded.</param>
            <param name="commandString">The command string that will be recorded along with this timing, for display in the MiniProfiler results.</param>
            <param name="minSaveMs">The minimum amount of time that needs to elapse in order for this result to be recorded.</param>
            <param name="executeType">Execute Type to be associated with the Custom Timing. Example: Get, Set, Insert, Delete</param>
            <param name="includeStackTrace">Whether to include the stack trace in this custom timing.</param>
            <remarks>
            Should be used like the <see cref="M:StackExchange.Profiling.MiniProfilerExtensions.Step(StackExchange.Profiling.MiniProfiler,System.String)"/> extension method.
            </remarks>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerExtensions.Ignore(StackExchange.Profiling.MiniProfiler)">
            <summary>
            Returns an <see cref="T:System.IDisposable"/> that will ignore profiling between its creation and disposal.
            </summary>
            <remarks>
            This is mainly useful in situations where you want to ignore database profiling for known hot spots,
            but it is safe to use in a nested step such that you can ignore sub-sections of a profiled step.
            </remarks>
            <param name="profiler">The current profiling session or null.</param>
            <returns>the profile step</returns>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerExtensions.AddProfilerResults(StackExchange.Profiling.MiniProfiler,StackExchange.Profiling.MiniProfiler)">
            <summary>
            Adds <paramref name="externalProfiler"/>'s <see cref="T:StackExchange.Profiling.Timing"/> hierarchy to this profiler's current Timing step,
            allowing other threads, remote calls, etc. to be profiled and joined into this profiling session.
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to add to.</param>
            <param name="externalProfiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to append to <paramref name="profiler"/>'s tree.</param>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerExtensions.AddCustomLink(StackExchange.Profiling.MiniProfiler,System.String,System.String)">
            <summary>
            Adds the <paramref name="text"/> and <paramref name="url"/> pair to <paramref name="profiler"/>'s
            <see cref="P:StackExchange.Profiling.MiniProfiler.CustomLinks"/> dictionary; will be displayed on the client in the bottom of the profiler popup.
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to add the link to.</param>
            <param name="text">The text label for the link.</param>
            <param name="url">The URL the link goes to.</param>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerExtensions.RenderPlainText(StackExchange.Profiling.MiniProfiler,System.Boolean)">
            <summary>
            Returns a plain-text representation of <paramref name="profiler"/>, suitable for viewing from
            <see cref="T:System.Console"/>, log, or unit test output.
            </summary>
            <param name="profiler">A profiling session with child <see cref="T:StackExchange.Profiling.Timing"/> instances.</param>
            <param name="htmlEncode">Whether to HTML encode the response, for use in a web page for example.</param>
        </member>
        <member name="T:StackExchange.Profiling.MiniProfilerOptionsExtensions">
            <summary>
            Handy extensions for <see cref="T:StackExchange.Profiling.Internal.MiniProfilerBaseOptions"/>.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerOptionsExtensions.ExcludeAssembly``1(``0,System.String)">
            <summary>
            Excludes an assembly from stack traces, convenience method for chaining, basically <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.ExcludedAssemblies"/>.Add(assembly)
            </summary>
            <typeparam name="T">The subtype of <see cref="T:StackExchange.Profiling.Internal.MiniProfilerBaseOptions"/> to use (inferred for common usage).</typeparam>
            <param name="options">The options to exclude the assembly on.</param>
            <param name="assembly">The assembly name to exclude from stack traces.</param>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerOptionsExtensions.ExcludeMethod``1(``0,System.String)">
            <summary>
            Excludes a method from stack traces, convenience method for chaining, basically <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.ExcludedMethods"/>.Add(assembly)
            </summary>
            <typeparam name="T">The subtype of <see cref="T:StackExchange.Profiling.Internal.MiniProfilerBaseOptions"/> to use (inferred for common usage).</typeparam>
            <param name="options">The options to exclude the method on.</param>
            <param name="method">The method name to exclude from stack traces.</param>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerOptionsExtensions.ExcludeType``1(``0,System.String)">
            <summary>
            Excludes a type from stack traces, convenience method for chaining, basically <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.ExcludedTypes"/>.Add(assembly)
            </summary>
            <typeparam name="T">The subtype of <see cref="T:StackExchange.Profiling.Internal.MiniProfilerBaseOptions"/> to use (inferred for common usage).</typeparam>
            <param name="options">The options to exclude the type on.</param>
            <param name="type">The type name to exclude from stack traces.</param>
        </member>
        <member name="M:StackExchange.Profiling.MiniProfilerOptionsExtensions.IgnorePath``1(``0,System.String)">
            <summary>
            Excludes a path from being profiled, convenience method for chaining, basically <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.IgnoredPaths"/>.Add(assembly)
            </summary>
            <typeparam name="T">The subtype of <see cref="T:StackExchange.Profiling.Internal.MiniProfilerBaseOptions"/> to use (inferred for common usage).</typeparam>
            <param name="options">The options to exclude the type on.</param>
            <param name="path">The path to exclude from profiled.</param>
        </member>
        <member name="T:StackExchange.Profiling.DefaultProfilerProvider">
            <summary>
            Default profile provider, gracefully handles async transitions.
            To use, override the <see cref="M:StackExchange.Profiling.DefaultProfilerProvider.Start(System.String,StackExchange.Profiling.Internal.MiniProfilerBaseOptions)"/>, <see cref="M:StackExchange.Profiling.DefaultProfilerProvider.Stopped(StackExchange.Profiling.MiniProfiler,System.Boolean)"/> and <see cref="P:StackExchange.Profiling.DefaultProfilerProvider.CurrentProfiler"/>
            methods.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.DefaultProfilerProvider.CurrentProfiler">
            <summary>
            The current profiler instance, statically resolved and backed by AsyncLocal{T}.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.DefaultProfilerProvider.Start(System.String,StackExchange.Profiling.Internal.MiniProfilerBaseOptions)">
            <summary>
            Starts a new MiniProfiler and sets it to be current.  By the end of this method
            <see cref="P:StackExchange.Profiling.DefaultProfilerProvider.CurrentProfiler"/> should return the new MiniProfiler.
            </summary>
            <param name="profilerName">
            Allows explicit naming of the new profiling session; when null, an appropriate default will be used, e.g. for
            a web request, the URL will be used for the overall session name.
            </param>
            <param name="options">The options to start the MiniProfiler with. Likely a more-specific type underneath.</param>
        </member>
        <member name="M:StackExchange.Profiling.DefaultProfilerProvider.Stopped(StackExchange.Profiling.MiniProfiler,System.Boolean)">
            <summary>
            Stops the current profiling session.
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to stop.</param>
            <param name="discardResults">
            When true, clears the <see cref="P:StackExchange.Profiling.MiniProfiler.Current"/>, allowing profiling to
            be prematurely stopped and discarded. Useful for when a specific route does not need to be profiled.
            </param>
        </member>
        <member name="M:StackExchange.Profiling.DefaultProfilerProvider.StoppedAsync(StackExchange.Profiling.MiniProfiler,System.Boolean)">
            <summary>
            Asynchronously stops the current MiniProfiler (if any is currently running).
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to stop.</param>
            <param name="discardResults">
            When true, clears the <see cref="P:StackExchange.Profiling.MiniProfiler.Current"/>, allowing profiling to
            be prematurely stopped and discarded. Useful for when a specific route does not need to be profiled.
            </param>
        </member>
        <member name="M:StackExchange.Profiling.DefaultProfilerProvider.Save(StackExchange.Profiling.MiniProfiler)">
            <summary>
            Calls <see cref="M:StackExchange.Profiling.Storage.IAsyncStorage.Save(StackExchange.Profiling.MiniProfiler)"/> to save the current
            profiler using the current storage settings.
            If <see cref="P:StackExchange.Profiling.MiniProfiler.Storage"/> is set, this will be used.
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to save.</param>
        </member>
        <member name="M:StackExchange.Profiling.DefaultProfilerProvider.SaveAsync(StackExchange.Profiling.MiniProfiler)">
            <summary>
            Asynchronously calls <see cref="M:StackExchange.Profiling.Storage.IAsyncStorage.SaveAsync(StackExchange.Profiling.MiniProfiler)"/> to save the current
            profiler using the current storage settings.
            If <see cref="P:StackExchange.Profiling.MiniProfiler.Storage"/> is set, this will be used.
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to save.</param>
        </member>
        <member name="T:StackExchange.Profiling.IAsyncProfilerProvider">
            <summary>
            A provider used to create <see cref="T:StackExchange.Profiling.MiniProfiler"/> instances and maintain the current instance.
            Options are passed into the <see cref="M:StackExchange.Profiling.IAsyncProfilerProvider.Start(System.String,StackExchange.Profiling.Internal.MiniProfilerBaseOptions)"/> method (they can be a more specific type).
            For later events, <see cref="P:StackExchange.Profiling.MiniProfiler.Options"/> can be accessed from the <see cref="T:StackExchange.Profiling.MiniProfiler"/> parameter.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.IAsyncProfilerProvider.CurrentProfiler">
            <summary>
            Returns the current MiniProfiler. This is used by <see cref="P:StackExchange.Profiling.MiniProfiler.Current"/>.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.IAsyncProfilerProvider.Start(System.String,StackExchange.Profiling.Internal.MiniProfilerBaseOptions)">
            <summary>
            Starts a new MiniProfiler and sets it to be current.  By the end of this method
            <see cref="P:StackExchange.Profiling.IAsyncProfilerProvider.CurrentProfiler"/> should return the new MiniProfiler.
            Unless one was not created due to ignore rules, etc.
            </summary>
            <param name="profilerName">
            Allows explicit naming of the new profiling session; when null, an appropriate default will be used, e.g. for
            a web request, the URL will be used for the overall session name.
            </param>
            <param name="options">The options to start the MiniProfiler with. Likely a more-specific type underneath.</param>
        </member>
        <member name="M:StackExchange.Profiling.IAsyncProfilerProvider.Stopped(StackExchange.Profiling.MiniProfiler,System.Boolean)">
            <summary>
            Ends the current profiling session, if one exists.
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to stop.</param>
            <param name="discardResults">
            When true, clears the <see cref="P:StackExchange.Profiling.MiniProfiler.Current"/>, allowing profiling to
            be prematurely stopped and discarded. Useful for when a specific route does not need to be profiled.
            </param>
        </member>
        <member name="M:StackExchange.Profiling.IAsyncProfilerProvider.StoppedAsync(StackExchange.Profiling.MiniProfiler,System.Boolean)">
            <summary>
            Asynchronously ends the current profiling session, if one exists.
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to stop.</param>
            <param name="discardResults">
            When true, clears the <see cref="P:StackExchange.Profiling.MiniProfiler.Current"/>, allowing profiling to
            be prematurely stopped and discarded. Useful for when a specific route does not need to be profiled.
            </param>
        </member>
        <member name="T:StackExchange.Profiling.SingletonProfilerProvider">
            <summary>
            Mostly for unit testing and single-threaded applications, only allows one
            instance of a <see cref="T:StackExchange.Profiling.MiniProfiler"/> to be the <see cref="P:StackExchange.Profiling.MiniProfiler.Current"/> one.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.SingletonProfilerProvider.CurrentProfiler">
            <summary>
            The current profiler, 1 instance!
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.SingletonProfilerProvider.Start(System.String,StackExchange.Profiling.Internal.MiniProfilerBaseOptions)">
            <summary>
            Starts a new profiling session.
            </summary>
            <param name="profilerName">The name for the started <see cref="T:StackExchange.Profiling.MiniProfiler"/>.</param>
            <param name="options">The options to use for this profiler, including all downstream commands.</param>
        </member>
        <member name="M:StackExchange.Profiling.SingletonProfilerProvider.Stopped(StackExchange.Profiling.MiniProfiler,System.Boolean)">
            <summary>
            Stops the current profiling session.
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to stop.</param>
            <param name="discardResults">
            When true, clears the <see cref="P:StackExchange.Profiling.MiniProfiler.Current"/>, allowing profiling to
            be prematurely stopped and discarded. Useful for when a specific route does not need to be profiled.
            </param>
        </member>
        <member name="M:StackExchange.Profiling.SingletonProfilerProvider.StoppedAsync(StackExchange.Profiling.MiniProfiler,System.Boolean)">
            <summary>
            Asynchronously stops the current profiling session.
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to stop.</param>
            <param name="discardResults">
            When true, clears the <see cref="P:StackExchange.Profiling.MiniProfiler.Current"/>, allowing profiling to
            be prematurely stopped and discarded. Useful for when a specific route does not need to be profiled.
            </param>
        </member>
        <member name="T:StackExchange.Profiling.RenderOptions">
            <summary>
            Options for rendering a specific MiniProfiler instance.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.RenderOptions.Position">
            <summary>
            The UI position to render the profiler in.
            Defaults to <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.PopupRenderPosition"/>.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.RenderOptions.ShowTrivial">
            <summary>
            Whether to show trivial timings column initially or not.
            Defaults to <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.PopupShowTrivial"/>.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.RenderOptions.ShowTimeWithChildren">
            <summary>
            Whether to show time with children column initially or not.
            Defaults to <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.PopupShowTimeWithChildren"/>.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.RenderOptions.MaxTracesToShow">
            <summary>
            The maximum number of profilers to show (before the oldest is removed).
            Defaults to <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.PopupMaxTracesToShow"/>.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.RenderOptions.ShowControls">
            <summary>
            Whether to show the controls.
            Defaults to <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.ShowControls"/>.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.RenderOptions.StartHidden">
            <summary>
            Whether to start hidden.
            Defaults to <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.PopupStartHidden"/>.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.RenderOptions.PopupToggleKeyboardShortcut">
            <summary>
            The keyboard key combination to use toggle profiler visibility.
            Defaults to <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.PopupToggleKeyboardShortcut"/>.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.RenderOptions.TrivialDurationThresholdMilliseconds">
            <summary>
            The amount of ms before a timing is considered non-trivial.
            Defaults to <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.TrivialDurationThresholdMilliseconds"/>.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.RenderOptions.ColorScheme">
            <summary>
            The color scheme to use when rendering this MiniProfiler.
            Defaults to <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.ColorScheme"/>.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.RenderOptions.DecimalPlaces">
            <summary>
            The number of decimal places to show on timings (which are in milliseconds).
            Defaults to <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.PopupDecimalPlaces"/>.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.RenderOptions.Nonce">
            <summary>
            A one-time-use nonce to render in the script tag.
            </summary>
            <remarks>https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script</remarks>
        </member>
        <member name="T:StackExchange.Profiling.RenderPosition">
            <summary>
            Dictates on which side of the page the profiler popup button is displayed; defaults to top left.
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.RenderPosition.Left">
            <summary>
            Profiler popup button is displayed on the top left.
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.RenderPosition.Right">
            <summary>
            Profiler popup button is displayed on the top right.
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.RenderPosition.BottomLeft">
            <summary>
            Profiler popup button is displayed on the bottom left.
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.RenderPosition.BottomRight">
            <summary>
            Profiler popup button is displayed on the bottom right.
            </summary>
        </member>
        <member name="T:StackExchange.Profiling.SqlFormatters.IAdvancedSqlFormatter">
            <summary>
            Takes a <c>SqlTiming</c> and returns a formatted SQL string, for parameter replacement, etc.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.SqlFormatters.IAdvancedSqlFormatter.FormatSql(System.String,System.Collections.Generic.List{StackExchange.Profiling.SqlTimingParameter},System.Data.IDbCommand)">
            <summary>
            Return SQL the way you want it to look on the in the trace. Usually used to format parameters.
            </summary>
            <param name="commandText">The SQL command to format.</param>
            <param name="parameters">The parameters for the SQL command.</param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> being represented.</param>
        </member>
        <member name="T:StackExchange.Profiling.SqlFormatters.InlineFormatter">
            <summary>
            Formats any SQL query with inline parameters, optionally including the value type.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.SqlFormatters.InlineFormatter.InsertSpacesAfterCommas">
            <summary>
            Whether to modify the output query by adding spaces after commas.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.SqlFormatters.InlineFormatter.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:StackExchange.Profiling.SqlFormatters.InlineFormatter"/>, optionally including the parameter type info
            in comments beside the replaced value
            </summary>
            <param name="includeTypeInfo">Whether to include a comment after the value, indicating the type, e.g. <c>/* @myParam DbType.Int32 */</c></param>
        </member>
        <member name="M:StackExchange.Profiling.SqlFormatters.InlineFormatter.FormatSql(System.String,System.Collections.Generic.List{StackExchange.Profiling.SqlTimingParameter})">
            <summary>
            Formats the SQL in a generic friendly format, including the parameter type information
            in a comment if it was specified in the InlineFormatter constructor.
            </summary>
            <param name="commandText">The SQL command to format.</param>
            <param name="parameters">The parameters for the SQL command.</param>
        </member>
        <member name="M:StackExchange.Profiling.SqlFormatters.InlineFormatter.GetParameterValue(StackExchange.Profiling.SqlTimingParameter)">
            <summary>
            Returns a string representation of the parameter's value, including the type.
            </summary>
            <param name="param">The timing parameter to get the value for.</param>
        </member>
        <member name="T:StackExchange.Profiling.SqlFormatters.ISqlFormatter">
            <summary>
            Takes a <c>SqlTiming</c> and returns a formatted SQL string, for parameter replacement, etc.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.SqlFormatters.ISqlFormatter.FormatSql(System.String,System.Collections.Generic.List{StackExchange.Profiling.SqlTimingParameter})">
            <summary>
            Return SQL the way you want it to look on the in the trace. Usually used to format parameters.
            </summary>
            <param name="commandText">The SQL command to format.</param>
            <param name="parameters">The parameters for the SQL command.</param>
        </member>
        <member name="T:StackExchange.Profiling.SqlFormatters.SqlFormatterExtensions">
            <summary>
            Extensions for ISqlFormatter instances
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.SqlFormatters.SqlFormatterExtensions.GetFormattedSql(StackExchange.Profiling.SqlFormatters.ISqlFormatter,System.String,System.Collections.Generic.List{StackExchange.Profiling.SqlTimingParameter},System.Data.IDbCommand)">
            <summary>
            Format sql using the FormatSql method available in the current <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.SqlFormatter"/>.
            </summary>
            <param name="sqlFormatter">The <see cref="T:StackExchange.Profiling.SqlFormatters.ISqlFormatter"/> to use.</param>
            <param name="commandText">The SQL command to format.</param>
            <param name="parameters">The parameters for the SQL command.</param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> being represented.</param>
            <remarks>It is preferable to use this rather than accessing <see cref="M:StackExchange.Profiling.SqlFormatters.ISqlFormatter.FormatSql(System.String,System.Collections.Generic.List{StackExchange.Profiling.SqlTimingParameter})"/> directly,
            as this method will detect whether an <see cref="T:StackExchange.Profiling.SqlFormatters.IAdvancedSqlFormatter"/> is being used, and will access it properly.
            This may be removed in a future major version when <see cref="T:StackExchange.Profiling.SqlFormatters.IAdvancedSqlFormatter"/> can be consolidated back
            into <see cref="T:StackExchange.Profiling.SqlFormatters.ISqlFormatter"/>.
            </remarks>
        </member>
        <member name="M:StackExchange.Profiling.SqlFormatters.SqlFormatterExtensions.GetFormattedSql(StackExchange.Profiling.SqlFormatters.ISqlFormatter,System.Data.IDbCommand)">
            <summary>
            Format sql using the FormatSql method available on the given <see cref="T:StackExchange.Profiling.SqlFormatters.ISqlFormatter"/>.
            </summary>
            <param name="sqlFormatter">The <see cref="T:StackExchange.Profiling.SqlFormatters.ISqlFormatter"/> to use.</param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> being represented.</param>
        </member>
        <member name="T:StackExchange.Profiling.SqlFormatters.SqlServerFormatter">
            <summary>
            Formats SQL server queries with a DECLARE up top for parameter values.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.SqlFormatters.SqlServerFormatter.IncludeParameterValues">
            <summary>
            Whether to include parameter declarations in the formatted output.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.SqlFormatters.SqlServerFormatter.InsertSpacesAfterCommas">
            <summary>
            Whether to modify the output query by adding spaces after commas.
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.SqlFormatters.SqlServerFormatter.ParamTranslator">
            <summary>
            Lookup a function for translating a parameter by parameter type.
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.SqlFormatters.SqlServerFormatter.DontQuote">
            <summary>
            What data types should not be quoted when used in parameters.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.SqlFormatters.SqlServerFormatter.FormatSql(System.String,System.Collections.Generic.List{StackExchange.Profiling.SqlTimingParameter})">
            <summary>
            Formats the SQL in a SQL-Server friendly way, with DECLARE statements for the parameters up top.
            </summary>
            <param name="commandText">The SQL command to format.</param>
            <param name="parameters">The parameters for the SQL command.</param>
        </member>
        <member name="M:StackExchange.Profiling.SqlFormatters.SqlServerFormatter.FormatSql(System.String,System.Collections.Generic.List{StackExchange.Profiling.SqlTimingParameter},System.Data.IDbCommand)">
            <summary>
            Formats the SQL in a SQL-Server friendly way, with DECLARE statements for the parameters up top.
            </summary>
            <param name="commandText">The SQL command to format.</param>
            <param name="parameters">The parameters for the SQL command.</param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> being represented.</param>
        </member>
        <member name="M:StackExchange.Profiling.SqlFormatters.SqlServerFormatter.TerminateSqlStatement(System.Text.StringBuilder)">
            <summary>
            This function is necessary to always return the sql statement terminated with a semicolon.
            Since we're using semicolons, we should also add it to the end.
            </summary>
            <param name="sqlStatement">The SQL statement to terminate if necessary</param>
        </member>
        <member name="M:StackExchange.Profiling.SqlFormatters.SqlServerFormatter.GenerateParamText(System.Text.StringBuilder,System.Collections.Generic.List{StackExchange.Profiling.SqlTimingParameter})">
            <summary>
            Generate formatter output text for all <paramref name="parameters"/>.
            </summary>
            <param name="buffer"><see cref="T:System.Text.StringBuilder"/> to use</param>
            <param name="parameters">Parameters to evaluate</param>
        </member>
        <member name="M:StackExchange.Profiling.SqlFormatters.SqlServerFormatter.PrepareValue(StackExchange.Profiling.SqlTimingParameter)">
            <summary>
            Prepare the parameter value for use in SqlFormatter output
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:StackExchange.Profiling.SqlFormatters.VerboseSqlServerFormatter">
            <summary>
            Formats SQL server queries with a DECLARE up top for parameter values.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.SqlFormatters.VerboseSqlServerFormatter.IncludeMetaData">
            <summary>
            Should meta data relating to the command type, database and transaction be included in SQL output.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.SqlFormatters.VerboseSqlServerFormatter.#ctor(System.Boolean)">
            <summary>
            The constructor
            </summary>
            <param name="includeMetaData"></param>
        </member>
        <member name="M:StackExchange.Profiling.SqlFormatters.VerboseSqlServerFormatter.FormatSql(System.String,System.Collections.Generic.List{StackExchange.Profiling.SqlTimingParameter},System.Data.IDbCommand)">
            <summary>
            Formats the SQL in a SQL-Server friendly way, with DECLARE statements for the parameters up top.
            </summary>
            <param name="commandText">The SQL command to format.</param>
            <param name="parameters">The parameters for the SQL command.</param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> being represented.</param>
        </member>
        <member name="T:StackExchange.Profiling.SqlTimingParameter">
            <summary>
            Information about a DbParameter used in the sql statement profiled by SqlTiming.
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.SqlTimingParameter.MaxByteParameterSize">
            <summary>
            Holds the maximum size that will be stored for byte[] parameters
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.SqlTimingParameter.Name">
            <summary>
            Parameter name, e.g. "routeName"
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.SqlTimingParameter.Value">
            <summary>
            The value submitted to the database.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.SqlTimingParameter.DbType">
            <summary>
            System.Data.DbType, e.g. "String", "Bit"
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.SqlTimingParameter.Size">
            <summary>
            How large the type is, e.g. for string, size could be 4000
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.SqlTimingParameter.Direction">
            <summary>
            System.Data.ParameterDirection: "Input", "Output", "InputOutput", "ReturnValue"
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.SqlTimingParameter.IsNullable">
            <summary>
            Gets or sets a value that indicates whether the parameter accepts null values.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.SqlTimingParameter.Equals(System.Object)">
            <summary>
            Returns true if this has the same parent
            <see cref="P:StackExchange.Profiling.SqlTimingParameter.Name"/> and <see cref="P:StackExchange.Profiling.SqlTimingParameter.Value"/> as <paramref name="obj"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare.</param>
        </member>
        <member name="M:StackExchange.Profiling.SqlTimingParameter.GetHashCode">
            <summary>
            Returns the XOR of certain properties.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.SqlTimingParameter.ToString">
            <summary>
            Returns name and value for debugging.
            </summary>
        </member>
        <member name="T:StackExchange.Profiling.Storage.DatabaseStorageBase">
            <summary>
            Understands how to save MiniProfiler results to a MSSQL database, allowing more permanent storage and querying of slow results.
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.Storage.DatabaseStorageBase.MiniProfilersTable">
            <summary>
            The table <see cref="T:StackExchange.Profiling.MiniProfiler"/>s are stored in.
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.Storage.DatabaseStorageBase.MiniProfilerTimingsTable">
            <summary>
            The table <see cref="T:StackExchange.Profiling.Timing"/>s are stored in.
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.Storage.DatabaseStorageBase.MiniProfilerClientTimingsTable">
            <summary>
            The table <see cref="T:StackExchange.Profiling.ClientTiming"/>s are stored in.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Storage.DatabaseStorageBase.ConnectionString">
            <summary>
            Gets or sets how we connect to the database used to save/load MiniProfiler results.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Storage.DatabaseStorageBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.Profiling.Storage.DatabaseStorageBase"/> class.
            Returns a new <c>SqlServerDatabaseStorage</c> object that will insert into the database identified by connectionString.
            </summary>
            <param name="connectionString">The connection String</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.DatabaseStorageBase.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.Profiling.Storage.DatabaseStorageBase"/> class.
            Returns a new <c>SqlServerDatabaseStorage</c> object that will insert into the database identified by connectionString.
            </summary>
            <param name="connectionString">The connection String</param>
            <param name="profilersTable">The table name to use for MiniProfilers.</param>
            <param name="timingsTable">The table name to use for MiniProfiler Timings.</param>
            <param name="clientTimingsTable">The table name to use for MiniProfiler Client Timings.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.DatabaseStorageBase.GetConnection">
            <summary>
            Returns a connection to the data store.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Storage.DatabaseStorageBase.Save(StackExchange.Profiling.MiniProfiler)">
            <summary>
            Saves 'profiler' to a database under its <see cref="P:StackExchange.Profiling.MiniProfiler.Id"/>.
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to save.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.DatabaseStorageBase.SaveAsync(StackExchange.Profiling.MiniProfiler)">
            <summary>
            Asynchronously saves 'profiler' to a database under its <see cref="P:StackExchange.Profiling.MiniProfiler.Id"/>.
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to save.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.DatabaseStorageBase.Load(System.Guid)">
            <summary>
            Returns the MiniProfiler identified by 'id' from the database or null when no MiniProfiler exists under that 'id'.
            </summary>
            <param name="id">The profiler ID to load.</param>
            <returns>The loaded <see cref="T:StackExchange.Profiling.MiniProfiler"/>.</returns>
        </member>
        <member name="M:StackExchange.Profiling.Storage.DatabaseStorageBase.LoadAsync(System.Guid)">
            <summary>
            Asynchronously returns the MiniProfiler identified by 'id' from the database or null when no MiniProfiler exists under that 'id'.
            </summary>
            <param name="id">The profiler ID to load.</param>
            <returns>The loaded <see cref="T:StackExchange.Profiling.MiniProfiler"/>.</returns>
        </member>
        <member name="P:StackExchange.Profiling.Storage.DatabaseStorageBase.SetUnviewedAfterSave">
            <summary>
            Whether this storage provider should call SetUnviewed methods (separately) after saving.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Storage.DatabaseStorageBase.SetUnviewed(System.String,System.Guid)">
            <summary>
            Sets a particular profiler session so it is considered "unviewed".
            </summary>
            <param name="user">The user to set this profiler ID as unviewed for.</param>
            <param name="id">The profiler ID to set unviewed.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.DatabaseStorageBase.SetUnviewedAsync(System.String,System.Guid)">
            <summary>
            Asynchronously sets a particular profiler session so it is considered "unviewed".
            </summary>
            <param name="user">The user to set this profiler ID as unviewed for.</param>
            <param name="id">The profiler ID to set unviewed.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.DatabaseStorageBase.SetViewed(System.String,System.Guid)">
            <summary>
            Sets a particular profiler session to "viewed".
            </summary>
            <param name="user">The user to set this profiler ID as viewed for.</param>
            <param name="id">The profiler ID to set viewed.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.DatabaseStorageBase.SetViewedAsync(System.String,System.Guid)">
            <summary>
            Asynchronously sets a particular profiler session to "viewed".
            </summary>
            <param name="user">The user to set this profiler ID as viewed for.</param>
            <param name="id">The profiler ID to set viewed.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.DatabaseStorageBase.GetUnviewedIds(System.String)">
            <summary>
            Returns a list of <see cref="P:StackExchange.Profiling.MiniProfiler.Id"/>s that haven't been seen by <paramref name="user"/>.
            </summary>
            <param name="user">User identified by the current <c>MiniProfilerOptions.UserProvider</c>.</param>
            <returns>The list of keys for the supplied user</returns>
        </member>
        <member name="M:StackExchange.Profiling.Storage.DatabaseStorageBase.GetUnviewedIdsAsync(System.String)">
            <summary>
            Asynchronously returns a list of <see cref="P:StackExchange.Profiling.MiniProfiler.Id"/>s that haven't been seen by <paramref name="user"/>.
            </summary>
            <param name="user">User identified by the current <c>MiniProfilerOptions.UserProvider</c>.</param>
            <returns>The list of keys for the supplied user</returns>
        </member>
        <member name="M:StackExchange.Profiling.Storage.DatabaseStorageBase.List(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},StackExchange.Profiling.Storage.ListResultsOrder)">
            <summary>
            Returns the MiniProfiler Ids for the given search criteria.
            </summary>
            <param name="maxResults">The max number of results.</param>
            <param name="start">Search window start.</param>
            <param name="finish">Search window end.</param>
            <param name="orderBy">Result order.</param>
            <returns>The list of GUID keys.</returns>
        </member>
        <member name="M:StackExchange.Profiling.Storage.DatabaseStorageBase.ListAsync(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},StackExchange.Profiling.Storage.ListResultsOrder)">
            <summary>
            Asynchronously returns the MiniProfiler Ids for the given search criteria.
            </summary>
            <param name="maxResults">The max number of results.</param>
            <param name="start">Search window start.</param>
            <param name="finish">Search window end.</param>
            <param name="orderBy">Result order.</param>
            <returns>The list of GUID keys.</returns>
        </member>
        <member name="M:StackExchange.Profiling.Storage.DatabaseStorageBase.ConnectTimings(StackExchange.Profiling.MiniProfiler,System.Collections.Generic.List{StackExchange.Profiling.Timing},System.Collections.Generic.List{StackExchange.Profiling.ClientTiming})">
            <summary>
            Connects timings from the database, shared here for use in multiple providers.
            </summary>
            <param name="profiler">The profiler to connect the timing tree to.</param>
            <param name="timings">The raw list of Timings to construct the tree from.</param>
            <param name="clientTimings">The client timings to connect to the profiler.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.DatabaseStorageBase.PopulateChildTimings(StackExchange.Profiling.Timing,System.Linq.ILookup{System.Guid,StackExchange.Profiling.Timing})">
            <summary>
            Build the subtree of <see cref="T:StackExchange.Profiling.Timing"/> objects with <paramref name="parent"/> at the top.
            Used recursively.
            </summary>
            <param name="parent">Parent <see cref="T:StackExchange.Profiling.Timing"/> to be evaluated.</param>
            <param name="timingsLookupByParent">Key: parent timing Id; Value: collection of all <see cref="T:StackExchange.Profiling.Timing"/> objects under the given parent.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.DatabaseStorageBase.FlattenTimings(StackExchange.Profiling.Timing,System.Collections.Generic.List{StackExchange.Profiling.Timing})">
            <summary>
            Flattens the timings down into a single list.
            </summary>
            <param name="timing">The <see cref="T:StackExchange.Profiling.Timing"/> to flatten into <paramref name="timingsCollection"/>.</param>
            <param name="timingsCollection">The collection to add all timings in the <paramref name="timing"/> tree to.</param>
        </member>
        <member name="P:StackExchange.Profiling.Storage.DatabaseStorageBase.TableCreationScripts">
            <summary>
            The table creation scripts for this database storage.
            Generated by the <see cref="M:StackExchange.Profiling.Storage.DatabaseStorageBase.GetTableCreationScripts"/> implemented by the provider.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Storage.DatabaseStorageBase.GetTableCreationScripts">
            <summary>
            Creates needed tables. Run this once on your database.
            </summary>
            <remarks>
            Works in SQL server and <c>sqlite</c> (with documented removals).
            </remarks>
        </member>
        <member name="T:StackExchange.Profiling.Storage.IDatabaseStorageConnectable">
            <summary>
            Interface for accessing the <see cref="T:StackExchange.Profiling.Storage.DatabaseStorageBase"/>'s connection, for testing.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Storage.IDatabaseStorageConnectable.GetConnection">
            <summary>
            Gets the connection for a <see cref="T:StackExchange.Profiling.Storage.IDatabaseStorageConnectable"/> for testing.
            </summary>
            <returns>The connection for this storage.</returns>
        </member>
        <member name="T:StackExchange.Profiling.Storage.ListResultsOrder">
            <summary>
            How lists should be sorted.
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.Storage.ListResultsOrder.Ascending">
            <summary>
            Ascending Order
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.Storage.ListResultsOrder.Descending">
            <summary>
            Descending Order
            </summary>
        </member>
        <member name="T:StackExchange.Profiling.Storage.IAsyncStorage">
            <summary>
            Provides saving and loading <see cref="T:StackExchange.Profiling.MiniProfiler"/>s to a storage medium.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Storage.IAsyncStorage.List(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},StackExchange.Profiling.Storage.ListResultsOrder)">
            <summary>
            List the latest profiling results.
            </summary>
            <param name="maxResults">The maximum number of results to return.</param>
            <param name="start">(Optional) The start of the date range to fetch.</param>
            <param name="finish">(Optional) The end of the date range to fetch.</param>
            <param name="orderBy">(Optional) The order to fetch profiler IDs in.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.IAsyncStorage.Save(StackExchange.Profiling.MiniProfiler)">
            <summary>
            Stores <paramref name="profiler"/> under its <see cref="P:StackExchange.Profiling.MiniProfiler.Id"/>.
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to save.</param>
            <remarks>
            Should also ensure the profiler is stored as being unviewed by its profiling <see cref="P:StackExchange.Profiling.MiniProfiler.User"/>.
            </remarks>
        </member>
        <member name="M:StackExchange.Profiling.Storage.IAsyncStorage.Load(System.Guid)">
            <summary>
            Returns a <see cref="T:StackExchange.Profiling.MiniProfiler"/> from storage based on <paramref name="id"/>,
            which should map to <see cref="P:StackExchange.Profiling.MiniProfiler.Id"/>.
            </summary>
            <param name="id">The profiler ID to load.</param>
            <returns>The loaded <see cref="T:StackExchange.Profiling.MiniProfiler"/>.</returns>
            <remarks>
            Should also update that the resulting profiler has been marked as viewed by its
            profiling <see cref="P:StackExchange.Profiling.MiniProfiler.User"/>.
            </remarks>
        </member>
        <member name="M:StackExchange.Profiling.Storage.IAsyncStorage.SetUnviewed(System.String,System.Guid)">
            <summary>
            Sets a particular profiler session so it is considered "unviewed"
            </summary>
            <param name="user">The user to set this profiler ID as unviewed for.</param>
            <param name="id">The profiler ID to set unviewed.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.IAsyncStorage.SetViewed(System.String,System.Guid)">
            <summary>
            Sets a particular profiler session to "viewed"
            </summary>
            <param name="user">The user to set this profiler ID as viewed for.</param>
            <param name="id">The profiler ID to set viewed.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.IAsyncStorage.GetUnviewedIds(System.String)">
            <summary>
            Returns a list of <see cref="P:StackExchange.Profiling.MiniProfiler.Id"/>s that haven't been seen by <paramref name="user"/>.
            </summary>
            <param name="user">User identified by the current <c>MiniProfilerOptions.UserProvider</c></param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.IAsyncStorage.ListAsync(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},StackExchange.Profiling.Storage.ListResultsOrder)">
            <summary>
            Asynchronously list the latest profiling results.
            </summary>
            <param name="maxResults">The maximum number of results to return.</param>
            <param name="start">(Optional) The start of the date range to fetch.</param>
            <param name="finish">(Optional) The end of the date range to fetch.</param>
            <param name="orderBy">(Optional) The order to fetch profiler IDs in.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.IAsyncStorage.SaveAsync(StackExchange.Profiling.MiniProfiler)">
            <summary>
            Asynchronously stores <paramref name="profiler"/> under its <see cref="P:StackExchange.Profiling.MiniProfiler.Id"/>.
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to save.</param>
            <remarks>
            Should also ensure the profiler is stored as being unviewed by its profiling <see cref="P:StackExchange.Profiling.MiniProfiler.User"/>.
            </remarks>
        </member>
        <member name="M:StackExchange.Profiling.Storage.IAsyncStorage.LoadAsync(System.Guid)">
            <summary>
            Asynchronously returns a <see cref="T:StackExchange.Profiling.MiniProfiler"/> from storage based on <paramref name="id"/>,
            which should map to <see cref="P:StackExchange.Profiling.MiniProfiler.Id"/>.
            </summary>
            <param name="id">The profiler ID to load.</param>
            <returns>The loaded <see cref="T:StackExchange.Profiling.MiniProfiler"/>.</returns>
            <remarks>
            Should also update that the resulting profiler has been marked as viewed by its
            profiling <see cref="P:StackExchange.Profiling.MiniProfiler.User"/>.
            </remarks>
        </member>
        <member name="M:StackExchange.Profiling.Storage.IAsyncStorage.SetUnviewedAsync(System.String,System.Guid)">
            <summary>
            Asynchronously sets a particular profiler session so it is considered "unviewed"
            </summary>
            <param name="user">The user to set this profiler ID as unviewed for.</param>
            <param name="id">The profiler ID to set unviewed.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.IAsyncStorage.SetViewedAsync(System.String,System.Guid)">
            <summary>
            Asynchronously sets a particular profiler session to "viewed"
            </summary>
            <param name="user">The user to set this profiler ID as viewed for.</param>
            <param name="id">The profiler ID to set viewed.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.IAsyncStorage.GetUnviewedIdsAsync(System.String)">
            <summary>
            Asynchronously returns a list of <see cref="P:StackExchange.Profiling.MiniProfiler.Id"/>s that haven't been seen by <paramref name="user"/>.
            </summary>
            <param name="user">User identified by the current <c>MiniProfilerOptions.UserProvider</c></param>
        </member>
        <member name="T:StackExchange.Profiling.Storage.AsyncStorageExtensions">
            <summary>
            Extension methods for <see cref="T:StackExchange.Profiling.Storage.IAsyncStorage"/>.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Storage.AsyncStorageExtensions.SetUnviewed(StackExchange.Profiling.Storage.IAsyncStorage,StackExchange.Profiling.MiniProfiler)">
            <summary>
            Sets a specific <see cref="T:StackExchange.Profiling.MiniProfiler"/> to "unviewed".
            </summary>
            <param name="storage">The <see cref="T:StackExchange.Profiling.Storage.IAsyncStorage"/> provider.</param>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to set to "unviewed".</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.AsyncStorageExtensions.SetUnviewedAsync(StackExchange.Profiling.Storage.IAsyncStorage,StackExchange.Profiling.MiniProfiler)">
            <summary>
            Asynchronously sets a specific <see cref="T:StackExchange.Profiling.MiniProfiler"/> to "unviewed".
            </summary>
            <param name="storage">The <see cref="T:StackExchange.Profiling.Storage.IAsyncStorage"/> provider.</param>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to set to "unviewed".</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.AsyncStorageExtensions.SetViewed(StackExchange.Profiling.Storage.IAsyncStorage,StackExchange.Profiling.MiniProfiler)">
            <summary>
            Sets a specific <see cref="T:StackExchange.Profiling.MiniProfiler"/> to "viewed".
            </summary>
            <param name="storage">The <see cref="T:StackExchange.Profiling.Storage.IAsyncStorage"/> provider.</param>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to set to "viewed".</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.AsyncStorageExtensions.SetViewedAsync(StackExchange.Profiling.Storage.IAsyncStorage,StackExchange.Profiling.MiniProfiler)">
            <summary>
            Asynchronously sets a specific <see cref="T:StackExchange.Profiling.MiniProfiler"/> to "viewed".
            </summary>
            <param name="storage">The <see cref="T:StackExchange.Profiling.Storage.IAsyncStorage"/> provider.</param>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to set to "viewed".</param>
        </member>
        <member name="T:StackExchange.Profiling.Storage.MultiStorageProvider">
            <summary>
            Allow for results to be stored in and retrieved from multiple IAsyncStorage stores.
            When reading Loading a MiniProfiler, will load from the first Store that returns a record for the Guid.
            When saving, will save in all Stores.
            </summary>
            <example>Ideal usage scenario - you want to store requests in Cache and Sql Server, but only want to retrieve from Cache if it is available</example>
        </member>
        <member name="P:StackExchange.Profiling.Storage.MultiStorageProvider.Stores">
            <summary>
            The stores that are exposed by this <see cref="T:StackExchange.Profiling.Storage.MultiStorageProvider"/>
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Storage.MultiStorageProvider.AllowParallelOps">
            <summary>
            Should operations use Parallel.ForEach when it makes sense to do so (all save operations, and data retrieval where all items in <see cref="P:StackExchange.Profiling.Storage.MultiStorageProvider.Stores"/> are hit?
            If False, all operations will run synchronously, in order. Defaults to False.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MultiStorageProvider.#ctor(StackExchange.Profiling.Storage.IAsyncStorage[])">
            <summary>
            Create the <see cref="T:StackExchange.Profiling.Storage.MultiStorageProvider"/> with the given collection of <see cref="T:StackExchange.Profiling.Storage.IAsyncStorage"/> objects (order is important!)
            </summary>
            <param name="stores">The <see cref="T:StackExchange.Profiling.Storage.IAsyncStorage"/> objects to use for storage (order is important!)</param>
            <exception cref="T:System.ArgumentNullException">Throws when there are no Stores.</exception>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MultiStorageProvider.List(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},StackExchange.Profiling.Storage.ListResultsOrder)">
            <summary>
            Run the List command on the first Store from <see cref="P:StackExchange.Profiling.Storage.MultiStorageProvider.Stores"/> that returns a result with any values.
            Will NOT return a superset of results from all <see cref="P:StackExchange.Profiling.Storage.MultiStorageProvider.Stores"/>.
            </summary>
            <param name="maxResults">The maximum number of results to return.</param>
            <param name="start">(Optional) The start of the date range to fetch.</param>
            <param name="finish">(Optional) The end of the date range to fetch.</param>
            <param name="orderBy">(Optional) The order to fetch profiler IDs in.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MultiStorageProvider.ListAsync(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},StackExchange.Profiling.Storage.ListResultsOrder)">
            <summary>
            Asynchronously run the List command on the first Store from <see cref="P:StackExchange.Profiling.Storage.MultiStorageProvider.Stores"/> that returns a result with any values.
            Will NOT return a superset of results from all <see cref="P:StackExchange.Profiling.Storage.MultiStorageProvider.Stores"/>.
            </summary>
            <param name="maxResults">The maximum number of results to return.</param>
            <param name="start">(Optional) The start of the date range to fetch.</param>
            <param name="finish">(Optional) The end of the date range to fetch.</param>
            <param name="orderBy">(Optional) The order to fetch profiler IDs in.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MultiStorageProvider.Save(StackExchange.Profiling.MiniProfiler)">
            <summary>
            Stores <paramref name="profiler"/> under its <see cref="P:StackExchange.Profiling.MiniProfiler.Id"/> in all of the <see cref="P:StackExchange.Profiling.Storage.MultiStorageProvider.Stores"/>.
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to save.</param>
            <remarks>
            Should also ensure the profiler is stored as being unviewed by its profiling <see cref="P:StackExchange.Profiling.MiniProfiler.User"/>.
            </remarks>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MultiStorageProvider.SaveAsync(StackExchange.Profiling.MiniProfiler)">
            <summary>
            Asynchronously stores <paramref name="profiler"/> under its <see cref="P:StackExchange.Profiling.MiniProfiler.Id"/> in all of the <see cref="P:StackExchange.Profiling.Storage.MultiStorageProvider.Stores"/>.
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to save.</param>
            <remarks>
            Should also ensure the profiler is stored as being unviewed by its profiling <see cref="P:StackExchange.Profiling.MiniProfiler.User"/>.
            </remarks>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MultiStorageProvider.Load(System.Guid)">
            <summary>
            Returns a <see cref="T:StackExchange.Profiling.MiniProfiler"/> from storage based on <paramref name="id"/>,
            which should map to <see cref="P:StackExchange.Profiling.MiniProfiler.Id"/>. Will check in all of the <see cref="T:StackExchange.Profiling.Storage.IAsyncStorage"/>
            classes in <see cref="P:StackExchange.Profiling.Storage.MultiStorageProvider.Stores"/>, and will return the first <see cref="T:StackExchange.Profiling.MiniProfiler"/> that it finds.
            </summary>
            <param name="id">The profiler ID to load.</param>
            <returns>The loaded <see cref="T:StackExchange.Profiling.MiniProfiler"/>.</returns>
            <remarks>
            Should also update that the resulting profiler has been marked as viewed by its profiling <see cref="P:StackExchange.Profiling.MiniProfiler.User"/>.
            </remarks>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MultiStorageProvider.LoadAsync(System.Guid)">
            <summary>
            Asynchronously returns a <see cref="T:StackExchange.Profiling.MiniProfiler"/> from storage based on <paramref name="id"/>,
            which should map to <see cref="P:StackExchange.Profiling.MiniProfiler.Id"/>. Will check in all of the <see cref="T:StackExchange.Profiling.Storage.IAsyncStorage"/>
            classes in <see cref="P:StackExchange.Profiling.Storage.MultiStorageProvider.Stores"/>, and will return the first <see cref="T:StackExchange.Profiling.MiniProfiler"/> that it finds.
            </summary>
            <param name="id">The profiler ID to load.</param>
            <returns>The loaded <see cref="T:StackExchange.Profiling.MiniProfiler"/>.</returns>
            <remarks>
            Should also update that the resulting profiler has been marked as viewed by its profiling <see cref="P:StackExchange.Profiling.MiniProfiler.User"/>.
            </remarks>
        </member>
        <member name="P:StackExchange.Profiling.Storage.MultiStorageProvider.SetUnviewedAfterSave">
            <summary>
            Whether any of the underlying providers should call SetUnviewed methods after saving.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MultiStorageProvider.SetUnviewed(System.String,System.Guid)">
            <summary>
            Sets a particular profiler session so it is considered "unviewed".
            Will set this to all <see cref="T:StackExchange.Profiling.Storage.IAsyncStorage"/> items in <see cref="P:StackExchange.Profiling.Storage.MultiStorageProvider.Stores"/>
            </summary>
            <param name="user">The user to set this profiler ID as unviewed for.</param>
            <param name="id">The profiler ID to set unviewed.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MultiStorageProvider.SetUnviewedAsync(System.String,System.Guid)">
            <summary>
            Asynchronously sets a particular profiler session so it is considered "unviewed".
            Will set this to all <see cref="T:StackExchange.Profiling.Storage.IAsyncStorage"/> items in <see cref="P:StackExchange.Profiling.Storage.MultiStorageProvider.Stores"/>
            </summary>
            <param name="user">The user to set this profiler ID as unviewed for.</param>
            <param name="id">The profiler ID to set unviewed.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MultiStorageProvider.SetViewed(System.String,System.Guid)">
            <summary>
            Sets a particular profiler session to "viewed".
            Will set this to all <see cref="T:StackExchange.Profiling.Storage.IAsyncStorage"/> items in <see cref="P:StackExchange.Profiling.Storage.MultiStorageProvider.Stores"/>
            </summary>
            <param name="user">The user to set this profiler ID as viewed for.</param>
            <param name="id">The profiler ID to set viewed.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MultiStorageProvider.SetViewedAsync(System.String,System.Guid)">
            <summary>
            Asynchronously sets a particular profiler session to "viewed".
            This sets viewed on all <see cref="T:StackExchange.Profiling.Storage.IAsyncStorage"/> items in <see cref="P:StackExchange.Profiling.Storage.MultiStorageProvider.Stores"/>.
            </summary>
            <param name="user">The user to set this profiler ID as viewed for.</param>
            <param name="id">The profiler ID to set viewed.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MultiStorageProvider.GetUnviewedIds(System.String)">
            <summary>
            Runs <see cref="M:StackExchange.Profiling.Storage.IAsyncStorage.GetUnviewedIds(System.String)"/> on each <see cref="T:StackExchange.Profiling.Storage.IAsyncStorage"/> object in <see cref="P:StackExchange.Profiling.Storage.MultiStorageProvider.Stores"/> and returns the Union of results.
            Will run on multiple stores in parallel if <see cref="P:StackExchange.Profiling.Storage.MultiStorageProvider.AllowParallelOps"/> = true.
            </summary>
            <param name="user">The user to fetch IDs for</param>
            <returns>A distinct list of unviewed IDs</returns>
        </member>
        <member name="M:StackExchange.Profiling.Storage.MultiStorageProvider.GetUnviewedIdsAsync(System.String)">
            <summary>
            Asynchronously runs <see cref="M:StackExchange.Profiling.Storage.IAsyncStorage.GetUnviewedIds(System.String)"/> on each <see cref="T:StackExchange.Profiling.Storage.IAsyncStorage"/> object in <see cref="P:StackExchange.Profiling.Storage.MultiStorageProvider.Stores"/> and returns the Union of results.
            </summary>
            <param name="user">The user to fetch IDs for</param>
            <returns>A distinct list of unviewed IDs</returns>
        </member>
        <member name="T:StackExchange.Profiling.Storage.NullStorage">
            <summary>
            Empty storage no-nothing provider for doing nothing at all. Super efficient.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Storage.NullStorage.List(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},StackExchange.Profiling.Storage.ListResultsOrder)">
            <summary>
            Returns no profilers.
            </summary>
            <param name="maxResults">No one cares.</param>
            <param name="start">No one cares.</param>
            <param name="finish">No one cares.</param>
            <param name="orderBy">No one cares.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.NullStorage.ListAsync(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},StackExchange.Profiling.Storage.ListResultsOrder)">
            <summary>
            Returns no profilers.
            </summary>
            <param name="maxResults">No one cares.</param>
            <param name="start">No one cares.</param>
            <param name="finish">No one cares.</param>
            <param name="orderBy">No one cares.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.NullStorage.Save(StackExchange.Profiling.MiniProfiler)">
            <summary>
            Saves nothing.
            </summary>
            <param name="profiler">No one cares.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.NullStorage.SaveAsync(StackExchange.Profiling.MiniProfiler)">
            <summary>
            Saves nothing.
            </summary>
            <param name="profiler">No one cares.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.NullStorage.Load(System.Guid)">
            <summary>
            Returns null.
            </summary>
            <param name="id">No one cares.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.NullStorage.LoadAsync(System.Guid)">
            <summary>
            Returns null.
            </summary>
            <param name="id">No one cares.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.NullStorage.SetUnviewed(System.String,System.Guid)">
            <summary>
            Sets nothing.
            </summary>
            <param name="user">No one cares.</param>
            <param name="id">No one cares.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.NullStorage.SetUnviewedAsync(System.String,System.Guid)">
            <summary>
            Sets nothing.
            </summary>
            <param name="user">No one cares.</param>
            <param name="id">No one cares.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.NullStorage.SetViewed(System.String,System.Guid)">
            <summary>
            Sets nothing.
            </summary>
            <param name="user">No one cares.</param>
            <param name="id">No one cares.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.NullStorage.SetViewedAsync(System.String,System.Guid)">
            <summary>
            Sets nothing.
            </summary>
            <param name="user">No one cares.</param>
            <param name="id">No one cares.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.NullStorage.GetUnviewedIds(System.String)">
            <summary>
            Gets nothing.
            </summary>
            <param name="user">No one cares.</param>
        </member>
        <member name="M:StackExchange.Profiling.Storage.NullStorage.GetUnviewedIdsAsync(System.String)">
            <summary>
            Gets nothing.
            </summary>
            <param name="user">No one cares.</param>
        </member>
        <member name="T:StackExchange.Profiling.Suppression">
            <summary>
            An individual suppression block that deactivates profiling temporarily
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Suppression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.Profiling.Suppression"/> class.
            Obsolete - used for serialization.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Suppression.#ctor(StackExchange.Profiling.MiniProfiler)">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.Profiling.Suppression"/> class.
            Creates a new Suppression to deactivate profiling while alive
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> to suppress.</param>
            <exception cref="T:System.ArgumentNullException">Throws when the <paramref name="profiler"/> is <c>null</c>.</exception>
        </member>
        <member name="P:StackExchange.Profiling.Suppression.Profiler">
            <summary>
            Gets a reference to the containing profiler, allowing this Suppression to affect profiler activity.
            </summary>
        </member>
        <member name="T:StackExchange.Profiling.Timing">
            <summary>
            An individual profiling step that can contain child steps.
            </summary>
        </member>
        <member name="F:StackExchange.Profiling.Timing._startTicks">
            <summary>
            Offset from parent MiniProfiler's creation that this Timing was created.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Timing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StackExchange.Profiling.Timing"/> class.
            Obsolete - used for serialization.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Timing.#ctor(StackExchange.Profiling.MiniProfiler,StackExchange.Profiling.Timing,System.String,System.Nullable{System.Decimal},System.Nullable{System.Boolean})">
            <summary>
            Creates a new Timing named 'name' in the 'profiler's session, with 'parent' as this Timing's immediate ancestor.
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> this <see cref="T:StackExchange.Profiling.Timing"/> belongs to.</param>
            <param name="parent">The <see cref="T:StackExchange.Profiling.Timing"/> this <see cref="T:StackExchange.Profiling.Timing"/> is a child of.</param>
            <param name="name">The name of this timing.</param>
            <param name="minSaveMs">(Optional) The minimum threshold (in milliseconds) for saving this timing.</param>
            <param name="includeChildrenWithMinSave">(Optional) Whether the children are included when comparing to the <paramref name="minSaveMs"/> threshold.</param>
        </member>
        <member name="M:StackExchange.Profiling.Timing.#ctor(StackExchange.Profiling.MiniProfiler,StackExchange.Profiling.Timing,System.String,System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Int32)">
            <summary>
            Creates a new Timing named 'name' in the 'profiler's session, with 'parent' as this Timing's immediate ancestor.
            </summary>
            <param name="profiler">The <see cref="T:StackExchange.Profiling.MiniProfiler"/> this <see cref="T:StackExchange.Profiling.Timing"/> belongs to.</param>
            <param name="parent">The <see cref="T:StackExchange.Profiling.Timing"/> this <see cref="T:StackExchange.Profiling.Timing"/> is a child of.</param>
            <param name="name">The name of this timing.</param>
            <param name="minSaveMs">(Optional) The minimum threshold (in milliseconds) for saving this timing.</param>
            <param name="includeChildrenWithMinSave">(Optional) Whether the children are included when comparing to the <paramref name="minSaveMs"/> threshold.</param>
            <param name="debugStackShave">The number of frames to shave off the debug stack.</param>
        </member>
        <member name="P:StackExchange.Profiling.Timing.Id">
            <summary>
            Gets or sets Unique identifier for this timing; set during construction.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Timing.Name">
            <summary>
            Gets or sets Text displayed when this Timing is rendered.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Timing.DurationMilliseconds">
            <summary>
            Gets or sets How long this Timing step took in ms; includes any <see cref="P:StackExchange.Profiling.Timing.Children"/> Timings' durations.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Timing.StartMilliseconds">
            <summary>
            Gets or sets The offset from the start of profiling.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Timing.Children">
            <summary>
            Gets or sets All sub-steps that occur within this Timing step. Add new children through <see cref="M:StackExchange.Profiling.Timing.AddChild(StackExchange.Profiling.Timing)"/>
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Timing.CustomTimings">
            <summary>
            <see cref="T:StackExchange.Profiling.CustomTiming"/> lists keyed by their type, e.g. "sql", "memcache", "redis", "http".
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Timing.DebugInfo">
            <summary>
            Present only when <c>EnableDebugMode</c> is <c>true</c>, additional step info in-memory only.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Timing.CustomTimingsJson">
            <summary>
            JSON representing the Custom Timings associated with this timing.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Timing.HasCustomTimings">
            <summary>
            Returns true when there exists any <see cref="T:StackExchange.Profiling.CustomTiming"/> objects in this <see cref="P:StackExchange.Profiling.Timing.CustomTimings"/>.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Timing.ParentTiming">
            <summary>
            Gets or sets Which Timing this Timing is under - the duration that this step takes will be added to its parent's duration.
            </summary>
            <remarks>This will be null for the root (initial) Timing.</remarks>
        </member>
        <member name="P:StackExchange.Profiling.Timing.ParentTimingId">
            <summary>
            The Unique Identifier identifying the parent timing of this Timing. Used for sql server storage.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Timing.DurationWithoutChildrenMilliseconds">
            <summary>
            Gets the elapsed milliseconds in this step without any children's durations.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Timing.IsTrivial">
            <summary>
            Gets a value indicating whether this <see cref="P:StackExchange.Profiling.Timing.DurationMilliseconds"/> is less than the configured
            <see cref="P:StackExchange.Profiling.Internal.MiniProfilerBaseOptions.TrivialDurationThresholdMilliseconds"/>, by default 2.0 ms.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Timing.HasChildren">
            <summary>
            Gets a value indicating whether this Timing has inner Timing steps.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Timing.IsRoot">
            <summary>
            Gets a value indicating whether this Timing is the first one created in a MiniProfiler session.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Timing.Depth">
            <summary>
            Gets a value indicating whether how far away this Timing is from the Profiler's Root.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Timing.Profiler">
            <summary>
            Gets a reference to the containing profiler, allowing this Timing to affect the Head and get Stopwatch readings.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.Timing.MiniProfilerId">
            <summary>
            The unique identifier used to identify the Profiler with which this Timing is associated. Used for sql storage.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Timing.ToString">
            <summary>
            Returns this Timing's Name.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Timing.Equals(System.Object)">
            <summary>
            Returns true if Ids match.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare to.</param>
        </member>
        <member name="M:StackExchange.Profiling.Timing.GetHashCode">
            <summary>
            Returns hash code of Id.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Timing.Stop">
            <summary>
            Completes this Timing's duration and sets the MiniProfiler's Head up one level.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Timing.System#IDisposable#Dispose">
            <summary>
            Stops profiling, allowing the <c>using</c> construct to neatly encapsulate a region to be profiled.
            </summary>
        </member>
        <member name="M:StackExchange.Profiling.Timing.AddChild(StackExchange.Profiling.Timing)">
            <summary>
            Add the parameter 'timing' to this Timing's Children collection.
            </summary>
            <param name="timing">The child <see cref="T:StackExchange.Profiling.Timing"/> to add.</param>
            <remarks>
            Used outside this assembly for custom deserialization when creating an <see cref="T:StackExchange.Profiling.Storage.IAsyncStorage"/> implementation.
            </remarks>
        </member>
        <member name="M:StackExchange.Profiling.Timing.AddCustomTiming(System.String,StackExchange.Profiling.CustomTiming)">
            <summary>
            Adds <paramref name="customTiming"/> to this <see cref="T:StackExchange.Profiling.Timing"/> step's dictionary of
            custom timings, <see cref="P:StackExchange.Profiling.Timing.CustomTimings"/>.  Ensures that <see cref="P:StackExchange.Profiling.Timing.CustomTimings"/> is created,
            as well as the <paramref name="category"/>'s list.
            </summary>
            <param name="category">The kind of custom timing, e.g. "http", "redis", "memcache"</param>
            <param name="customTiming">Duration and command information</param>
        </member>
        <member name="M:StackExchange.Profiling.Timing.GetCustomTimingList(System.String)">
            <summary>
            Returns the <see cref="T:StackExchange.Profiling.CustomTiming"/> list keyed to the <paramref name="category"/>, creating any collections when null.
            </summary>
            <param name="category">The kind of custom timings, e.g. "sql", "redis", "memcache"</param>
        </member>
        <member name="T:StackExchange.Profiling.TimingDebugInfo">
            <summary>
            Debug info for a timing, only present when <c>EnableDebugMode</c> is set in options.
            </summary>
        </member>
        <member name="P:StackExchange.Profiling.TimingDebugInfo.RichHtmlStack">
            <summary>
            An (already-encoded) HTML representation of the call stack.
            </summary>
            <remarks>
            Repetitive, but pays the prettification cost on fetch.
            We'll want to do a diff with the parent timing here in highlight or something.
            </remarks>
        </member>
        <member name="P:StackExchange.Profiling.TimingDebugInfo.CommonStackStart">
            <summary>
            The index of the stack frame that common frames with parent start at (e.g. happened in the parent timing, before this).
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IMiniProfilerBuilder">
            <summary>
            An interface for configuring MiniProfiler services.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.IMiniProfilerBuilder.Services">
            <summary>
            Gets the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> where MiniProfiler services are configured.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
    </members>
</doc>
